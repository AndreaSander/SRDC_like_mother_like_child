geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#d95f02", "#1f78b4",  "#7570b3", "#b2df8a", "#33a02c" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#1f78b4", "#d95f02", "#7570b3", "#b2df8a", "#33a02c" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#1f78b4", "#d95f02", "#b2df8a", "#33a02c", "#7570b3" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Exclusions count
total_excluded<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#Longitudinal data set n
n_long <-longitudinal_data %>%
distinct(unique_id)%>%
tally()
#Family language strategy visualization
#Calculating how many families use each strategy and its corresponding %
prop_strategy<- first_visit_only %>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
both_parents_biling<- prop_strategy %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
prop_strategy<- prop_strategy %>%
arrange(desc(prop))
#Waffle plot
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#1f78b4", "#d95f02", "#b2df8a", "#33a02c", "#7570b3" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
View(prop_strategy)
View(prop_strategy)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(dplyr)
library(lme4)
library(lmerTest)
library(rstatix)
library(broom)
library(janitor)
load(here("anonymized_data/final_merged_data.Rda"))
vars<-c("exp_l3", "exp_l4")
final_data_french_coded <-
final_data %>%
mutate_at(vars, as.numeric) %>%
mutate(l3 = replace(l3, l3=="NA", "no lang")) %>%
mutate(l4 = replace(l4, l4=="NA", "no lang")) %>%
mutate(fre_exp = case_when(l1=="French"~ exp_l1,
l2=="French"~ exp_l2,
l3=="French"~ exp_l3,
l4=="French"~ exp_l4,
TRUE~ 0)) %>%
mutate(eng_exp = case_when(l1=="English"~ exp_l1,
l2=="English"~ exp_l2,
l3=="English"~ exp_l3,
l4=="English"~ exp_l4,
TRUE~ 0)) %>%
mutate(min_exp = case_when (!(l1 %in% c("French", "English"))& l2 %in% c("French", "English") ~ exp_l1,
!(l2 %in% c("French", "English")) & l1 %in% c("French", "English") ~ exp_l2,
TRUE ~ 0
))
final_data_strat <- final_data_french_coded %>%
mutate(strategy=case_when(
#one-parent-one-lang-strict: Each parent speaks only one language and both parents don't speak the same language
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1 %in% c("never", "NA") & care2_l2=="regularly"~ "one-parent-one-lang",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "one-parent-one-lang",
#one-parent-one-lang-flex: Each parent speaks mainly one language, and one of them sometimes speaks another language
#(The same language cannot be spoken regularly by both parents or that would be considered a one-parent-bilingual strategy)
#**NOTE: we ended up having a single category for OPOL instead of divinding it into strict and flex.
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="sometimes" &care2_l2=="regularly"~ "one-parent-one-lang",
care1_l1=="regularly" & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") &care2_l2=="regularly"~ "one-parent-one-lang",
care1_l1=="sometimes" & care1_l2=="regularly" & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "one-parent-one-lang",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1=="regularly" &care2_l2=="sometimes"~ "one-parent-one-lang",
#one-parent-bilingual: One parent speaks 2 languages, the other parent only speaks one language
#Starting point
care1_l1== "regularly" & care1_l2=="regularly" & care2_l1 == "regularly" & care2_l2 %in% c("never", "NA") ~ "one-parent-bilingual",
care1_l1== "regularly" & care1_l2=="regularly" & care2_l1 %in% c("never", "NA") & care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1== "regularly" & care1_l2 %in% c("never", "NA") & care2_l1 == "regularly" & care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1 == "regularly" & care2_l2=="regularly" ~ "one-parent-bilingual",
#Some bilingual parents put both of their languages as sometimes rather than both as regularly
care1_l1== "sometimes" & care1_l2=="sometimes" & care2_l1 == "regularly" & care2_l2 %in% c("never", "NA") ~ "one-parent-bilingual",
care1_l1== "sometimes" & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") & care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1== "regularly" & care1_l2 %in% c("never", "NA") & care2_l1 == "sometimes" & care2_l2=="sometimes" ~ "one-parent-bilingual",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1 == "sometimes" & care2_l2=="sometimes" ~ "one-parent-bilingual",
#One parent bilingual (R&R or S&S) and another parent that speaks one of the language but not the other (R|S & N|NA)
care1_l1 == "regularly" & care1_l2=="regularly" & care2_l1 %in% c("regularly", "sometimes") & care2_l2 %in% c("never", "NA") ~ "one-parent-bilingual",
care1_l1 == "regularly" & care1_l2=="regularly" & care2_l1 %in% c("never", "NA") & care2_l2 %in% c("regularly", "sometimes") ~ "one-parent-bilingual",
care1_l1 %in% c("regularly", "sometimes") & care1_l2 %in% c("never", "NA") & care2_l1 == "regularly" & care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1 %in% c("never", "NA") & care1_l2 %in% c("regularly", "sometimes") & care2_l1 == "regularly" & care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1 == "sometimes" & care1_l2=="sometimes" & care2_l1 %in% c("regularly", "sometimes") & care2_l2 %in% c("never", "NA") ~ "one-parent-bilingual",
care1_l1 == "sometimes" & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") & care2_l2 %in% c("regularly", "sometimes") ~ "one-parent-bilingual",
care1_l1 %in% c("regularly", "sometimes") & care1_l2 %in% c("never", "NA") & care2_l1 == "sometimes" & care2_l2=="sometimes" ~ "one-parent-bilingual",
care1_l1 %in% c("never", "NA") & care1_l2 %in% c("regularly", "sometimes") & care2_l1 == "sometimes" & care2_l2=="sometimes" ~ "one-parent-bilingual",
#Both parents speak the same language regularly, and one of them speak another language sometimes
#(not one-parent-one-lang-flex because both parents use the same language regularly in opposition to each parent having a different language that they use regularly)
care1_l1=="regularly" & care1_l2=="sometimes" & care2_l1=="regularly" & care2_l2 %in% c("never", "NA") ~ "one-parent-bilingual",
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="regularly" & care2_l2=="sometimes" ~ "one-parent-bilingual",
care1_l1=="sometimes" & care1_l2=="regularly" & care2_l1 %in% c("never", "NA")& care2_l2=="regularly" ~ "one-parent-bilingual",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1=="sometimes" & care2_l2=="regularly" ~ "one-parent-bilingual",
#both-parents-bilingual: Both parents speak both languages either regularly or sometimes
care1_l1%in% c("regularly", "sometimes") & care1_l2%in% c("regularly", "sometimes") & care2_l1%in% c("regularly", "sometimes") &care2_l2%in% c("regularly", "sometimes") ~ "both-parents-bilingual",
#one-parent-one-lang-flex: Each parent speaks mainly one language, and one of them sometimes speaks another language
#The same language cannot be spoken regularly by both parents or it comes to be filled under the one-parent-bilingual strategy.
#**NOTE: we ended up having a single category for OPOL instead of divinding it into strict and flex.
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="sometimes" &care2_l2=="regularly"~ "one-parent-one-lang",
care1_l1=="regularly" & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") &care2_l2=="regularly"~ "one-parent-one-lang",
care1_l1=="sometimes" & care1_l2=="regularly" & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "one-parent-one-lang",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1=="regularly" &care2_l2=="sometimes"~ "one-parent-one-lang",
#one-language-at-home: There is only one language spoken in the home by both parents
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "one-language-at-home",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1 %in% c("never", "NA") & care2_l2=="regularly"~ "one-language-at-home",
care1_l1=="sometimes" & care1_l2 %in% c("never", "NA") & care2_l1=="sometimes" &care2_l2 %in% c("never", "NA")~ "one-language-at-home",
care1_l1 %in% c("never", "NA") & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") & care2_l2=="sometimes"~ "one-language-at-home",
#single-parent: Family in which there is only one caregiver
care1_l1 %in% c("never", "NA") & care1_l2 %in% c("never", "NA") & care1_l3 %in% c("never", "NA") & care1_l4 %in% c("never", "NA") ~ "single-parent",
care2_l1 %in% c("never", "NA") & care2_l2 %in% c("never", "NA") & care2_l3 %in% c("never", "NA") & care2_l4 %in% c("never", "NA") ~ "single-parent"
))
#Calculate the proportion for the different strategies
prop_strategy<-final_data_strat%>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n))
save(final_data_strat, file=here("anonymized_data/final_data_strat.Rda"))
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Exclusions count
total_excluded<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#Longitudinal data set n
n_long <-longitudinal_data %>%
distinct(unique_id)%>%
tally()
#Family language strategy visualization
#Calculating how many families use each strategy and its corresponding %
prop_strategy<- first_visit_only %>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
both_parents_biling<- prop_strategy %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
prop_strategy<- prop_strategy %>%
arrange(desc(prop))
#Waffle plot
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#1f78b4", "#d95f02", "#b2df8a", "#33a02c", "#7570b3" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#1f78b4", "#d95f02", "#33a02c", "#7570b3" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c("#FFC107", "#d95f02", "#1f78b4", "#33a02c", "#7570b3" )) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
print(figure_1)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
View(final_data_strat)
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))
View(strats_table)
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
arrange(strategy)
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
arrange(strategy) %>%
distinct()
install.packages("formattable")
library(formattable)
formattable(stats_table)
formattable(strats_table)
?icontext
freq_formatter <-
formatter("span",
style = x ~ style(
font.weight = "bold",
color = ifelse(x == "regularly", "#FFC107" , ifelse(x != "regularly","#1f78b4" , "black"))))
formattable(strats_table,
list(
"care1_l1"= freq_formatter()
))
formattable(strats_table,
list(
`care1_l1`= freq_formatter()
))
formattable(strats_table,
list(
`strategy`= color_bar("red")
))
?color_bar
?ifelse
View(strats_table)
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'white',
'background-color' =
ifelse(x == "regularly", "green", "red")
))
formattable(strats_table,
list(
`care1_l1`= color_formatter
))
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'white',
'background-color' =
ifelse(x == "regularly", "green", ifelse( x=="sometimes","yellow", "green"))
))
formattable(strats_table,
list(
`care1_l1`= color_formatter
))
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'white',
'background-color' =
ifelse(x == "regularly", "green", ifelse( x=="sometimes","yellow", "blue"))
))
formattable(strats_table,
list(
`care1_l1`= color_formatter
))
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'white',
'background-color' =
ifelse(x == "regularly", "green", ifelse( x=="sometimes","yellow", if_else(x=="never", "red", "white")))
))
formattable(strats_table,
list(
`care1_l1`= color_formatter
))
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'black',
'background-color' =
ifelse(x == "regularly", "#a1d76a", ifelse( x=="sometimes","#ffffbf", if_else(x=="never", "#e9a3c9", "white")))
))
formattable(strats_table,
list(
`care1_l1`= color_formatter
))
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(care1_l1, caregiver_A_L1)%>%
arrange(strategy) %>%
distinct()
View(final_data_strat)
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(caregiver_A_L1 = care1_l1)%>%
arrange(strategy) %>%
distinct()
View(strats_table)
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(c(caregiver_A_L1, caregiver_A_L1) = c(care1_l1, care1_l2))%>%
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(caregiver_A_L1 = care1_l1)%>%
rename(caregiver_A_L2 = care1_l2)%>%
rename(caregiver_B_L1 = care2_l1)%>%
rename(caregiver_B_L2 = care2_l2)%>%
arrange(strategy) %>%
distinct()
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'black',
'background-color' =
ifelse(x == "regularly", "#a1d76a", ifelse( x=="sometimes","#ffffbf", if_else(x=="never", "#e9a3c9", "white")))
))
formattable(strats_table,
list(
`caregiver_A_L1`= color_formatter,
`caregiver_A_L2`= color_formatter,
`caregiver_B_L1`= color_formatter,
`caregiver_B_L2`= color_formatter
))
?formatter
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
collapse_rows_df <- function(df, variable){
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(caregiver_A_L1 = care1_l1)%>%
rename(caregiver_A_L2 = care1_l2)%>%
rename(caregiver_B_L1 = care2_l1)%>%
rename(caregiver_B_L2 = care2_l2)%>%
arrange(strategy) %>%
distinct() %>%
collapse_rows_df(strategy)
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'black',
'background-color' =
ifelse(x == "regularly", "#a1d76a", ifelse( x=="sometimes","#ffffbf", if_else(x=="never", "#e9a3c9", "white")))
))
formattable(strats_table,
list(
`caregiver_A_L1`= color_formatter,
`caregiver_A_L2`= color_formatter,
`caregiver_B_L1`= color_formatter,
`caregiver_B_L2`= color_formatter
))
