mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1)
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(anon_baby_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(anon_baby_id)%>% #using anon_baby_id since it uniquely identifies individual babies, instead of identifying by study
tally()
num_visits <- final_data_strat %>%
count(anon_baby_id, name = "n_visits") %>%
count(n_visits, name = "n_families")  %>%
mutate(n_data_points = n_families* n_visits)
#French-English-Heritage bilingual percentages
FEH <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Exporting the final data set that we used in all analyses and visualizations
#write_xlsx(FEH,"anonymized_data\\fam_Str_cross_sectional.xlsx")
FEH_perc<- FEH %>%
group_by(bilingual_type) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#By bilingual type percentages
fre_eng_perc <- FEH %>%
filter(bilingual_type== "fre-eng")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_her_perc <- FEH %>%
filter(bilingual_type=="fre-her")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_eng_perc <- FEH %>%
filter(bilingual_type=="eng-her") %>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#l1 amount of exposure range
min_exp_range <- final_data_strat %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data_strat %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length <- longitudinal_data_analyses %>%
filter(visit <= 2)
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
FE_for_lms<- FEH %>%
filter(bilingual_type == "fre-eng") %>%
filter(!strategy == "single-parent") %>%
filter(!strategy == "one-language-at-home") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
for_lms<- FE_for_lms %>%
select(gender, anon_baby_id, age, exp_l2, fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2, type_of_family) %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%  #2023-07 going to need to fix this NAs in the cleaning script
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2)) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome") %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, exp_l2 = exp_l2/100) %>%
drop_na()
#STRATEGY LINEAR MODELS
lm_strat_eng<- lm(eng_exp ~ strategy, data=for_lms)
lm_strat_fre <- lm(fre_exp ~ strategy, data=for_lms)
#Summary of STRATEGY LINEAR models
summary(lm_strat_eng) #Slightly different, one parent bilingual is just a tad significant here and not for beta.
summary(lm_strat_fre) #Same as above, one parent bilingual is significant and not for beta.
###### Careviver models
parents_for_lms <- for_lms%>%
filter(type_of_family == "mother-father family") #Keeps only mother-father families as other configurations were to few to analyze separately
#MOTHER MODELS
lm_mom_eng<- lm(eng_exp ~ caregiver_1_english_use, data=for_lms)
lm_mom_fre<- lm(fre_exp ~ caregiver_1_french_use, data=for_lms)
#Summary of MOTHER models
summary(lm_mom_eng) #Similar pattern of results
summary(lm_mom_fre) #same pattern of results
#FATHER MODELS
lm_dad_eng<- lm(eng_exp ~ caregiver_2_english_use, data=for_lms)
lm_dad_fre<- lm(fre_exp ~ caregiver_2_french_use, data=for_lms)
#Summary of FATHER models
summary(lm_dad_eng) #Same pattern of results
summary(lm_dad_fre) #same pattern of results
#MOTHER AND FATHER MODELS
lm_parents_aditive_eng<- lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=parents_for_lms)
lm_parents_aditive_fre<- lm(fre_exp ~ caregiver_2_french_use + caregiver_1_french_use, data=parents_for_lms)
#Summary of Mother and Father models
summary(lm_parents_aditive_eng) #same pattern of results
summary(lm_parents_aditive_fre) #same pattern of results
performance::compare_performance(lm_parents_aditive_fre, lm_dad_fre, lm_mom_fre)
performance::compare_performance(lm_parents_aditive_eng, lm_dad_eng, lm_mom_eng)
##Comparison of strategy versus parents models
performance::compare_performance(lm_parents_aditive_fre, lm_strat_fre)
performance::compare_performance(lm_parents_aditive_eng, lm_strat_eng)
#REORDERING THE CAREGIVER LEVELS SO THAT THEY ARE ORDERED IN THE GRAPHS
for_lms$caregiver_1_french_use <- factor(for_lms$caregiver_1_french_use, levels= c("regularly","sometimes", "never"))
for_lms$caregiver_1_english_use <- factor(for_lms$caregiver_1_english_use, levels= c("regularly","sometimes", "never"))
for_lms$caregiver_2_french_use <- factor(for_lms$caregiver_2_french_use, levels= c("regularly","sometimes", "never"))
for_lms$caregiver_2_english_use <- factor(for_lms$caregiver_2_english_use, levels= c("regularly","sometimes", "never"))
#Summary of Mother and Father models
summary(her_lm_parents_aditive_eng)
#Summary of Mother and Father models
summary(lm_parents_aditive_eng) #same pattern of results
performance::compare_performance(lm_parents_aditive_eng, lm_strat_eng)
lm.beta.lmer <- function(mod) {
b <- fixef(mod)[-1]
sd.x <- apply(getME(mod,"X")[,-1],2,sd)
sd.y <- sd(getME(mod,"y"))
b*sd.x/sd.y
}
s_lm.beta.lmer <- function(mod) {
b <- fixef(mod)[-1];
sd.x <- apply(matrix(getME(mod,"X")[,-1]),2,sd);
sd.y <- sd(getME(mod,"y")); b*sd.x/sd.y; }
lm.beta.lmer(lm_parents_aditive_eng)
install.packages("QuantPsyc")
library(QuantPsyc)
QuantPsyc::lm.beta(lm_parents_aditive_eng)
QuantPsyc::lm.beta(lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=parents_for_lms))
QuantPsyc::lm.beta(lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=parents_for_lms), na.rm=T)
beta_eng<- QuantPsyc::lm.beta(lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=parents_for_lms))
## Getting standardized coefficients
QuantPsyc::lm.beta(lm_strat_eng)
stdcoeff <- function (MOD)  {b <- summary(MOD)$coef[-1, 1] ;    sx <- sd(MOD$model[-1]);     sy <- sd(MOD$model[1]);     beta <- b * sx/sy   ;  return(beta) }
stdcoeff(lm_strat_eng)
## Getting standardized coefficients
QuantPsyc::lm.beta(as.double(lm_strat_eng))
stdcoeff(lm_strat_eng$coefficients)
#STRATEGY LINEAR MODELS
lm_strat_eng<- lm(eng_exp ~ strategy, data=for_lms)
QuantPsyc::lm.beta(lm_strat_eng)
#STRATEGY LINEAR MODELS
std_strat_eng<- lm(scale(eng_exp) ~ scale(strategy), data=for_lms)
#STRATEGY LINEAR MODELS
std_strat_eng<- lm(scale(eng_exp) ~ strategy, data=for_lms)
summary(std_strat_eng)
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng")%>%
select(gender, anon_baby_id, age, exp_l2, min_exp,fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2, type_of_family) %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2))  %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_heritage_use = case_when(l1=="Heritage"~care1_l1,
l2=="Heritage"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_heritage_use = case_when(l1=="Heritage"~ care2_l1,
l2=="Heritage"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy %in% c("one-language-at-home", "single-parent")) %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, min_exp = min_exp/100)
library(lubridate)
library(sparkline)
library(webshot)
library(htmlwidgets)
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(broom)
library(janitor)
library(glmmTMB)
library(DHARMa)
library(betareg)
library(emmeans)
library(ggiraphExtra)
library(ggeffects)
library(mvtnorm)
library(boot)
library(bbmle)
library(performance)
library(see)
library(writexl)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual exclusions
total_monoling_excluded<- final_data_no_exc %>%
filter(exp_l1 >95) %>%
filter(exp_l2 <5) %>%
distinct(unique_id) %>%
tally()
#after third language exclusions exclusions
n <- final_data_strat %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1)
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(anon_baby_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(anon_baby_id)%>% #using anon_baby_id since it uniquely identifies individual babies, instead of identifying by study
tally()
num_visits <- final_data_strat %>%
count(anon_baby_id, name = "n_visits") %>%
count(n_visits, name = "n_families")  %>%
mutate(n_data_points = n_families* n_visits)
#French-English-Heritage bilingual percentages
FEH <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Exporting the final data set that we used in all analyses and visualizations
#write_xlsx(FEH,"anonymized_data\\fam_Str_cross_sectional.xlsx")
FEH_perc<- FEH %>%
group_by(bilingual_type) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#By bilingual type percentages
fre_eng_perc <- FEH %>%
filter(bilingual_type== "fre-eng")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_her_perc <- FEH %>%
filter(bilingual_type=="fre-her")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_eng_perc <- FEH %>%
filter(bilingual_type=="eng-her") %>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#l1 amount of exposure range
min_exp_range <- final_data_strat %>%
select(exp_l1) %>%
min()
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng")%>%
select(gender, anon_baby_id, age, exp_l2, min_exp,fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2, type_of_family) %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2))  %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_heritage_use = case_when(l1=="Heritage"~care1_l1,
l2=="Heritage"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_heritage_use = case_when(l1=="Heritage"~ care2_l1,
l2=="Heritage"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy %in% c("one-language-at-home", "single-parent")) %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, min_exp = min_exp/100)
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng")#%>%
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng")%>%
select(gender, anon_baby_id, age, exp_l2, min_exp,fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2, type_of_family) #%>%
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng") %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2))  %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_heritage_use = case_when(l1=="Heritage"~care1_l1,
l2=="Heritage"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_heritage_use = case_when(l1=="Heritage"~ care2_l1,
l2=="Heritage"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy %in% c("one-language-at-home", "single-parent")) %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, min_exp = min_exp/100)
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng") %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2))  %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_heritage_use = case_when(l1=="Heritage"~care1_l1,
l2=="Heritage"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_heritage_use = case_when(l1=="Heritage"~ care2_l1,
l2=="Heritage"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy %in% c("one-language-at-home", "single-parent")) %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, min_exp = min_exp/100)
#STRATEGY LINEAR MODELS
her_lm_strat_eng<- lm(eng_exp ~ strategy, data=her_for_lms)
her_lm_strat_fre <- lm(fre_exp ~ strategy, data=her_for_lms)
her_lm_strat_her <- lm(min_exp ~ strategy, data=her_for_lms)
#Summary of STRATEGY LINEAR models
summary(her_lm_strat_eng) #Slightly different, one parent bilingual is just a tad significant here and not for beta.
summary(her_lm_strat_fre) #Same as above, one parent bilingual is significant and not for beta.
summary(her_lm_strat_her)
###### Careviver models
her_parents_for_lms <- her_for_lms %>%
filter(type_of_family == "mother-father family")
#MOTHER MODELS
her_lm_mom_eng<- lm(eng_exp ~ caregiver_1_english_use, data=her_for_lms)
her_lm_mom_fre<- lm(fre_exp ~ caregiver_1_french_use, data=her_for_lms)
her_lm_mom_her<- lm(min_exp ~ caregiver_1_heritage_use, data=her_for_lms)
#Summary of MOTHER models
summary(her_lm_mom_eng)
summary(her_lm_mom_fre)
summary(her_lm_mom_her)
#FATHER MODELS
her_lm_dad_eng<- lm(eng_exp ~ caregiver_2_english_use, data=her_for_lms)
her_lm_dad_fre<- lm(fre_exp ~ caregiver_2_french_use, data=her_for_lms)
her_lm_dad_her<- lm(min_exp ~ caregiver_2_heritage_use, data=her_for_lms)
#Summary of FATHER models
summary(lm_dad_eng)
performance::compare_performance(her_lm_parents_aditive_eng, her_lm_strat_eng)
#MOTHER AND FATHER MODELS
her_lm_parents_aditive_eng<- lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=her_for_lms)
her_lm_parents_aditive_fre<- lm(fre_exp ~ caregiver_2_french_use + caregiver_1_french_use, data=her_for_lms)
her_lm_parents_aditive_her<- lm(min_exp ~ caregiver_2_heritage_use + caregiver_1_heritage_use, data=her_for_lms)
performance::compare_performance(her_lm_parents_aditive_eng, her_lm_strat_eng)
##Comparison of strategy versus parents models
performance::compare_performance(her_lm_parents_aditive_fre, her_lm_strat_fre)
performance::compare_performance(her_lm_parents_aditive_her, her_lm_strat_her)
language_by_caregiver <- FEH %>%
select(l1, care1_l1, care2_l1) %>%
group_by(l1, care1_l1, care2_l1) %>%
tally()
language_by_caregiver <- FEH %>%
group_by(l1, care1_l1, care2_l1) %>%
tally()
View(language_by_caregiver)
language_by_mother <- FEH %>%
group_by(l1, care1_l1) %>%
tally()
View(language_by_mother)
language_by_father <- FEH%>%
group_by(l1, care2_l1)%>%
tally()
View(language_by_father)
l1_by_mother <- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l1, care1_l1) %>%
tally()
l1_by_father <- FEH%>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l1, care2_l1)%>%
tally()
View(l1_by_mother)
View(l1_by_father)
l2_by_mother <- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l2, care1_l2) %>%
tally()
l2_by_father <- FEH%>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l2, care2_l2)%>%
tally()
View(l2_by_mother)
View(l2_by_father)
24+7
31+24
24+24
4800/55
14+(13+8)
11+13+8
32+24
View(l1_by_mother)
View(l2_by_mother)
24+24+7+1
4800/56
14+(13+8)
3500/56
38+53+55+55+65
266/5
19-4+9+3+4
31/5
655/30
