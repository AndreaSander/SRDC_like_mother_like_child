###########################
###################### GLMER MODEL To learn weather changing strategy was related to the time between visits ########
FE_for_long_glmer<- FE_long_analyses %>%
select(visit, strategy, length_between_visits, anon_baby_id) %>%
filter(visit %in% c(1,2)) %>%
filter(!strategy == "single-parent") %>%
pivot_wider(names_from = visit, values_from = strategy) %>%
rename(time_1 = "1") %>%
rename(time_2 = "2") %>%
mutate(change_strat = case_when(time_1 == time_2 ~"no_change",
TRUE~ "change"))
FE_for_long_glmer<- FE_for_long_glmer
FE_count_change <- FE_for_long_glmer %>%
group_by(change_strat) %>%
tally() %>%
mutate(perc = (n/sum(n)*100))
FE_strategy_change <- FE_for_long_glmer %>%
filter(change_strat=="change") %>%
group_by(time_2) %>%
tally() %>%
mutate(perc = (n/sum(n)*100))
long_model<- glmer(as.factor(change_strat) ~ scale(length_between_visits) +(1|anon_baby_id), data = FE_for_long_glmer, family="binomial")
summary(long_model)
############ make sankey graph ########
FE_for_sankey <- FE_for_long_glmer %>%
select(-change_strat) %>%
rename("time 1" = "time_1") %>%
rename("time 2" = "time_2") %>%
make_long("time 1", "time 2")
FE_for_sankey <- FE_for_sankey %>%
mutate(node= fct_relevel (node, "both-parents-bilingual", "one-parent-bilingual", "one-language-at-home", "one-parent-one-lang"))
FE_p1<- ggplot(FE_for_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node )) +
geom_sankey()
FE_node_counts <- FE_for_sankey %>%
filter(x=="time 1") %>%
group_by(node) %>%
summarise(count = n()) %>%
ungroup()
FE_next_node_counts <- FE_for_sankey %>%
filter(x=="time 1") %>%
group_by(next_node) %>%
summarise(count = n()) %>%
ungroup()
FE_p1$data$node<- factor(FE_p1$data$node, levels= c("one-parent-one-lang","one-parent-bilingual", "both-parents-bilingual"))
FE_p1$data$next_node <- factor(FE_p1$data$next_node, levels= c("one-parent-one-lang","one-parent-bilingual", "both-parents-bilingual"))
figure_2 <- FE_p1+
scale_fill_manual(name= "Family Language Strategies", values = c(my_blue, my_yellow, my_orange))
figure_2<- figure_2 +
# geom_sankey_label(size=10, color="black", fill="white")+
theme_bw()+
annotate("richtext", x=c(1,1,1), y=c(12,-3,-15), label=FE_node_counts$count, size=10)+ #Adding the N at time 1
annotate("richtext", x=c(2,2,2), y=c(12,-5,-15), label=FE_next_node_counts$count, size=10)+ #Adding the N at time 2
theme(axis.text.x = element_text(size=35), axis.title = element_blank(), plot.title = element_text(size=35), axis.ticks = element_blank(), axis.text.y = element_blank(), legend.text = element_text(size=35), legend.title = element_text(size=35))
ggsave(file="Figure_2.png",  width=25, height=12, dpi=300)
##Mother sankey
mom_long<- FE_long_analyses %>% #this results in a dataframe that has one row per kid who had 2 FR-EN visits.
filter(type_of_family == "mother-father family") %>%
filter(!strategy=="single-parent") %>%
filter(visit %in% c(1,2)) %>%
select(anon_baby_id, l1, l2, care1_l1, care1_l2, visit, length_between_visits) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2),
visit = paste0("time_", visit)) %>%
rename("Fre" = caregiver_1_french_use,
"Eng" = caregiver_1_english_use) %>%
select(-care1_l1, -care1_l2, -l1, -l2) %>%
pivot_wider(names_from = visit, values_from = c(Fre, Eng)) %>%
rename_at(vars(starts_with("Fre")), ~ paste0(str_remove(., "Fre_"), "_Fre")) %>%
rename_at(vars(starts_with("Eng")), ~  paste0(str_remove(., "Eng_"), "_Eng")) %>%
drop_na()
mom_long_french<- mom_long %>%
select(anon_baby_id, length_between_visits, time_1_Fre, time_2_Fre)
mom_long_english<- mom_long %>%
select(anon_baby_id, length_between_visits, time_1_Eng, time_2_Eng)
mom_long_fre_s <- mom_long_french %>%
rename("time 1" = "time_1_Fre") %>%
rename("time 2" = "time_2_Fre") %>%
make_long("time 1","time 2")
#Changeing the levels so that the graph is in order
mom_long_fre_s$node <- factor(mom_long_fre_s$node, levels= c("never","sometimes", "regularly"))
mom_long_fre_s$next_node <- factor(mom_long_fre_s$next_node, levels= c("never","sometimes","regularly"))
mom_long_eng_s <- mom_long_english %>%
rename("time 1" = "time_1_Eng") %>%
rename("time 2" = "time_2_Eng") %>%
make_long("time 1","time 2")
mom_long_eng_s$node <- factor(mom_long_eng_s$node, levels= c("never","sometimes", "regularly"))
mom_long_eng_s$next_node <- factor(mom_long_eng_s$next_node, levels= c("never","sometimes","regularly"))
v1_mother_prop_fre <- mom_long %>%
select(time_1_Fre, time_1_Eng) %>%
group_by(time_1_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_mother_prop_fre <- mom_long %>%
select(time_2_Fre, time_2_Eng) %>%
group_by(time_2_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v1_mother_prop_eng <- mom_long %>%
select(time_1_Fre, time_1_Eng) %>%
group_by(time_1_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_mother_prop_eng <- mom_long %>%
select(time_2_Fre, time_2_Eng) %>%
group_by(time_2_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
mom_fre_node_counts <- mom_long_fre_s %>%
filter(x=="time 1") %>%
group_by(node) %>%
summarise(count = n()) %>%
ungroup()
mom_fre_next_node_counts <-  mom_long_fre_s %>%
filter(x=="time 1") %>%
group_by(next_node) %>%
summarise(count = n()) %>%
ungroup()
figure_3_a <- ggplot(mom_long_fre_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"))+
theme_bw() +
labs(title= "A. Mothers' change of language use", subtitle = "French")+
theme(axis.text.x = element_text(size=30),legend.position = "none", plot.title = element_text(size=35),
plot.subtitle = element_text(size=30), axis.title=element_blank())+
annotate("richtext", x=c(1,1,1), y=c(5,-9,-20), label=c(20,11,5), size=10)+ #Adding the N at time 1
annotate("richtext", x=c(2,2,2), y=c(5,-9,-20), label=c(16,17,3), size=10) #Adding the N at time 2
mom_eng_node_counts <- mom_long_eng_s %>%
filter(x=="time 1") %>%
group_by(node) %>%
summarise(count = n()) %>%
ungroup()
mom_eng_next_node_counts <-  mom_long_eng_s %>%
filter(x=="time 1") %>%
group_by(next_node) %>%
summarise(count = n()) %>%
ungroup()
figure_3_b <- ggplot(mom_long_eng_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"), name="language use with child frequency")+
theme_bw() +
labs(title= "A. Mothers' change of language use", subtitle = "English")+
theme(axis.text.x = element_text(size=30),legend.text = element_text(size=30),legend.title = element_text(size=30), plot.title = element_text(size=35),
plot.subtitle = element_text(size=30), axis.title=element_blank())+
annotate("richtext", x=c(1,1,1), y=c(6,-10,-20), label=c(24, 8, 4), size=10)+ #Adding the N at time 1
annotate("richtext", x=c(2,2,2), y=c(5,-10,-20), label=c(26,7,3), size=10) #Adding the N at time 2
library(cowplot)
figure_3<- plot_grid(figure_3_a, figure_3_b, ncol=2, rel_widths = c(2,3))
ggsave(file="Figure_3.png", width=25, height=12, dpi=300)
#### Father sankey
dad_long<- FE_long_analyses %>% #this results in a dataframe that has one row per kid who had 2 FR-EN visits.
filter(type_of_family == "mother-father family") %>%
filter(!strategy=="single-parent") %>%
filter(visit %in% c(1,2)) %>%
select(anon_baby_id, l1, l2, care2_l1, care2_l2, visit, length_between_visits) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~care2_l1,
l2=="French"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2),
visit = paste0("time_", visit)) %>%
rename("Fre" = caregiver_2_french_use,
"Eng" = caregiver_2_english_use) %>%
select(-care2_l1, -care2_l2, -l1, -l2) %>%
pivot_wider(names_from = visit, values_from = c(Fre, Eng)) %>%
rename_at(vars(starts_with("Fre")), ~ paste0(str_remove(., "Fre_"), "_Fre")) %>%
rename_at(vars(starts_with("Eng")), ~  paste0(str_remove(., "Eng_"), "_Eng")) %>%
drop_na()
dad_long_french<- dad_long %>%
select(anon_baby_id, length_between_visits, time_1_Fre, time_2_Fre) %>%
mutate(time_1_Fre = case_when(time_1_Fre == "NA"~"never",
TRUE~ time_1_Fre))
dad_long_english<- dad_long %>%
select(anon_baby_id, length_between_visits, time_1_Eng, time_2_Eng)
dad_long_fre_s <- dad_long_french %>%
rename("time 1" = "time_1_Fre") %>%
rename("time 2" = "time_2_Fre") %>%
make_long("time 1","time 2")
dad_long_fre_s$node <- factor(dad_long_fre_s$node, levels= c("never","sometimes", "regularly"))
dad_long_fre_s$next_node <- factor(dad_long_fre_s$next_node, levels= c("never","sometimes","regularly"))
dad_long_eng_s <- dad_long_english %>%
rename("time 1" = "time_1_Eng") %>%
rename("time 2" = "time_2_Eng") %>%
make_long("time 1","time 2")
dad_long_eng_s$node <- factor(dad_long_eng_s$node, levels= c("never","sometimes", "regularly"))
dad_long_eng_s$next_node <- factor(dad_long_eng_s$next_node, levels= c("never","sometimes","regularly"))
v1_dad_prop_fre <- dad_long %>%
select(time_1_Fre, time_1_Eng) %>%
group_by(time_1_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_dad_prop_fre <- dad_long %>%
select(time_2_Fre, time_2_Eng) %>%
group_by(time_2_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v1_dad_prop_eng <- dad_long %>%
select(time_1_Fre, time_1_Eng) %>%
group_by(time_1_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_dad_prop_eng <- dad_long %>%
select(time_2_Fre, time_2_Eng) %>%
group_by(time_2_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
dad_fre_node_counts <- dad_long_fre_s %>%
filter(x=="time 1") %>%
group_by(node) %>%
summarise(count = n()) %>%
ungroup()
dad_fre_next_node_counts <-  dad_long_fre_s %>%
filter(x=="time 1") %>%
group_by(next_node) %>%
summarise(count = n()) %>%
ungroup()
figure_4_a <- ggplot(dad_long_fre_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"))+
theme_bw()+
theme(axis.text.x = element_text(size=30), legend.position = "none", plot.title = element_text(size=35), plot.subtitle = element_text(size = 30))+
labs(title= "A. Fathers' change of language use", subtitle = "French")+
annotate("richtext", x=c(1,1,1), y=c(5,-10,-20), label=c(22, 8, 6), size=10)+ #Adding the N at time 1
annotate("richtext", x=c(2,2,2), y=c(5,-10,-20), label=c(23,8,5), size=10) #Adding the N at time 2
dad_eng_node_counts <- mom_long_eng_s %>%
filter(x=="time 1") %>%
group_by(node) %>%
summarise(count = n()) %>%
ungroup()
dad_eng_next_node_counts <-  dad_long_eng_s %>%
filter(x=="time 1") %>%
group_by(next_node) %>%
summarise(count = n()) %>%
ungroup()
figure_4_b <- ggplot(dad_long_eng_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values =c("#dac291","#41ae76", "#75638b"), name="language use with child frequency")+
theme_bw()+
theme(axis.text.x = element_text(size=30), plot.title = element_text(size=35), axis.title = element_blank(), legend.text = element_text(size=30), legend.title = element_text(size=30), plot.subtitle = element_text(size = 30))+
labs(title= "B. Fathers' change of language use", subtitle = "English")+
annotate("richtext", x=c(1,1,1), y=c(4,-10,-22), label=c(24,8,4), size=10)+ #Adding the N at time 1
annotate("richtext", x=c(2,2,2), y=c(4,-10,-22), label=c(20,9,7), size=10) #Adding the N at time 2
figure_4<- plot_grid(figure_4_a, figure_4_b, ncol=2, rel_widths = c(2,3))
ggsave(file="Figure_4.png", width=25, height=12, dpi=300)
### Parents' Logistic model
for_mother_glmer <- mom_long  %>%
mutate(French_change = case_when(time_1_Fre == time_2_Fre ~ "No change",
TRUE~ "change")) %>%
mutate(English_change = case_when(time_1_Eng == time_2_Eng ~ "No change",
TRUE~ "change"))
for_father_glmer <- dad_long  %>%
mutate(French_change = case_when(time_1_Fre == time_2_Fre ~ "No change",
TRUE~ "change")) %>%
mutate(English_change = case_when(time_1_Eng == time_2_Eng ~ "No change",
TRUE~ "change"))
mother_long_prop<- for_mother_glmer %>%
group_by(French_change, English_change) %>%
tally()
father_long_prop<- for_father_glmer %>%
group_by(French_change, English_change) %>%
tally()
#Mother change model
mother_french_change_model<- glmer(as.factor(French_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_mother_glmer, family="binomial")
summary(mother_french_change_model)
mother_english_change_model<- glmer(as.factor(English_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_mother_glmer, family="binomial")
summary(mother_english_change_model)
#Father change model
father_french_change_model<- glmer(as.factor(French_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_father_glmer, family="binomial")
summary(father_french_change_model)
father_english_change_model<- glmer(as.factor(English_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_father_glmer, family="binomial")
summary(father_english_change_model)
###### FOR THE FRENCH- HERITAGE SAMPLE ###########
#Calculating how many families use each strategy and its corresponding %
her_prop_strategy<- FEH %>%
filter(!bilingual_type == "fre-eng")%>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#Reordering levels so legend in the graph is in order.
her_prop_strategy$strategy<- factor(her_prop_strategy$strategy, levels= c("one-parent-bilingual","both-parents-bilingual", "one-parent-one-lang", "single-parent", "one-language-at-home"))
her_prop_strategy<- her_prop_strategy %>%
arrange(desc(prop))
#Waffle plot
her_V1<- setNames(her_prop_strategy$n, c( "one-parent-bilingual","both-parents-bilingual","one-parent-one-lanaguage",  "single-parent", "one-language-at-home"))
figure_5 <- waffle(parts = her_V1, rows=6, colors = c(my_yellow, my_orange, my_blue, my_purple, my_green), keep = T, size=0.6) + annotate("richtext", x=c(2,6,9), y=4, label=c("24", "18", "12"), size=10) +
annotate("richtext", x=10, y=2, label= "4", size=10)+
annotate("richtext", x=10, y=6, label= "2", size=10)+
theme(legend.text= element_text(size=18),legend.title= element_text(size=18))
ggsave(file="Figure_5.png", width=25, height=7, dpi=300)
her_for_chisq <- her_prop_strategy %>%
filter(!strategy %in% c("single-parent", "one-language-at-home"))
her_xsq_test<- chisq.test(her_for_chisq$n)
### Looking at the individual parent strategies in each family language strategy
##Both parents bilingual
her_both_parent_b<- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng")%>%
filter(strategy=="both-parents-bilingual") %>%
mutate(caregiver1_French =  case_when (l1== "French"~care1_l1,
l2== "French"~care1_l2)) %>%
mutate(caregiver1_English =  case_when (l1== "English"~care1_l1,
l2== "English"~care1_l2)) %>%
mutate(caregiver1_heritage =  case_when (l1== "Heritage"~care1_l1,
l2== "Heritage"~care1_l2)) %>%
mutate(caregiver2_French =  case_when (l1== "French"~care2_l1,
l2== "French"~care2_l2)) %>%
mutate(caregiver2_English =  case_when (l1== "English"~care2_l1,
l2== "English"~care2_l2)) %>%
mutate(caregiver2_heritage =  case_when (l1== "Heritage"~care2_l1,
l2== "Heritage"~care2_l2)) %>%
mutate(mom_use_strategy = case_when( caregiver1_heritage == "regularly" & caregiver1_heritage == "regularly" ~ "both regularly",
caregiver1_French == "regularly" & caregiver1_heritage == "regularly" ~ "both regularly",
caregiver1_English == "regularly" & caregiver1_heritage == "regularly" ~ "both regularly",
caregiver1_French == "regularly" & caregiver1_heritage == "sometimes" ~ "french-reg-heritage-some",
caregiver1_French == "sometimes" & caregiver1_heritage == "regularly" ~ "french-some-heritage-reg",
caregiver1_English == "regularly" & caregiver1_heritage == "sometimes" ~ "english-reg-heritage-some",
caregiver1_English == "sometimes" & caregiver1_heritage == "regularly" ~ "english-some-heritage-reg",
))%>%
mutate(dad_use_strategy = case_when( caregiver2_heritage == "regularly" & caregiver2_heritage == "regularly" ~ "both regularly",
caregiver2_French == "regularly" & caregiver2_heritage == "regularly" ~ "both regularly",
caregiver2_English == "regularly" & caregiver2_heritage == "regularly" ~ "both regularly",
caregiver2_French == "regularly" & caregiver2_heritage == "sometimes" ~ "french-reg-heritage-some",
caregiver2_French == "sometimes" & caregiver2_heritage == "regularly" ~ "french-some-heritage-reg",
caregiver2_English == "regularly" & caregiver2_heritage == "sometimes" ~ "english-reg-heritage-some",
caregiver2_English == "sometimes" & caregiver2_heritage == "regularly" ~ "english-some-heritage-reg",
TRUE~"both-sometimes"))
# what are the percentages ?
her_mom_biling_strat<- her_both_parent_b %>%
group_by(mom_use_strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_dad_biling_strat<- her_both_parent_b %>%
group_by(dad_use_strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
## One-parent-bilingual
#Which parent is the bilingual parent?
her_one_parent_b<- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
filter(strategy=="one-parent-bilingual") %>%
mutate(caregiver_biling = case_when(care1_l1 %in% c("regularly", "sometimes") & care1_l2 %in% c("regularly", "sometimes") ~ "caregiver1",
TRUE ~ "caregiver2"))
#What are the percentages
her_caregiver_bi_prop <- her_one_parent_b %>%
group_by(caregiver_biling) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100) ## 67% mothers are the bilingual caregiver
#Which languages are spoken by the monolingual parent?
her_monoling_careg_lang<- her_one_parent_b %>%
mutate(monolingual_care_lang = case_when(caregiver_biling == "caregiver1" & care2_l1 %in% c("regularly", "sometimes") ~ l1,
caregiver_biling == "caregiver1" & care2_l2 %in% c("regularly", "sometimes") ~ l2,
caregiver_biling == "caregiver2" & care1_l1 %in% c("regularly", "sometimes") ~l1,
caregiver_biling == "caregiver2" & care1_l2 %in% c("regularly", "sometimes") ~l2)) %>%
group_by(monolingual_care_lang) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100) ## 69% on the parents who are monolingual speak English
##Also looking at OPOL strategy
her_opol<- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
filter(strategy=="one-parent-one-lang") %>%
mutate(parents_flexible_use = case_when( care1_l1 == "sometimes"| care1_l2 == "sometimes"|care2_l1 == "sometimes"|care2_l2 == "sometimes" ~ "flex_use",
TRUE ~ "strict_use"
))
her_flex_opol_count<- her_opol %>%
group_by(parents_flexible_use) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_opol_flex<- her_opol %>%
filter(parents_flexible_use == "flex_use") %>%
mutate(flex_parent = case_when(care1_l1 == "sometimes" | care1_l2  == "sometimes" ~ "mom",
TRUE~ "dad"))
her_opol_strict<- her_opol %>%
filter(!parents_flexible_use == "flex_use")
her_opol_parent_count<- her_opol_flex %>%
group_by(flex_parent) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
## Which language is spoken by which parent
l1_by_mother <- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l1, care1_l1) %>%
tally()
l1_by_father <- FEH%>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l1, care2_l1)%>%
tally()
l2_by_mother <- FEH %>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l2, care1_l2) %>%
tally()
l2_by_father <- FEH%>%
filter(type_of_family == "mother-father family") %>%
filter(!bilingual_type == "fre-eng") %>%
group_by(l2, care2_l2)%>%
tally()
her_for_lms <- FEH %>%
filter(!bilingual_type == "fre-eng") %>%
mutate(care1_l2 = case_when(care1_l2 =="NA" ~ "never",
TRUE ~ care1_l2)) %>%
mutate(care2_l1 = case_when(care2_l1 =="NA" ~ "never",
TRUE ~ care2_l1)) %>%
mutate(care2_l2 = case_when(care2_l2 =="NA" ~ "never",
TRUE ~ care2_l2))  %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_heritage_use = case_when(l1=="Heritage"~care1_l1,
l2=="Heritage"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_heritage_use = case_when(l1=="Heritage"~ care2_l1,
l2=="Heritage"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy %in% c("one-language-at-home", "single-parent")) %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, min_exp = min_exp/100)
#French-Heritage models
freher_for_lms <- her_for_lms %>%
filter(bilingual_type == "fre-her")
engher_for_lms <- her_for_lms %>%
filter(bilingual_type == "eng-her")
#STRATEGY LINEAR MODELS
her_lm_strat_eng<- lm(eng_exp ~ strategy, data=her_for_lms)
her_lm_strat_fre <- lm(fre_exp ~ strategy, data=her_for_lms)
her_lm_strat_her <- lm(min_exp ~ strategy, data=her_for_lms)
#With the new datasets
engher_lm_strat_eng<- lm(eng_exp ~ strategy, data=engher_for_lms )
freher_lm_strat_fre <- lm(fre_exp ~ strategy, data=freher_for_lms)
engher_lm_strat_her <- lm(min_exp ~ strategy, data=engher_for_lms)
freher_lm_strat_her <- lm(min_exp ~ strategy, data=freher_for_lms)
#Summary of STRATEGY LINEAR models
summary(her_lm_strat_eng) #Slightly different, one parent bilingual is just a tad significant here and not for beta.
summary(her_lm_strat_fre) #Same as above, one parent bilingual is significant and not for beta.
summary(her_lm_strat_her)
summary(engher_lm_strat_eng)
summary(freher_lm_strat_fre)
###### Careviver models
her_parents_for_lms <- her_for_lms %>%
filter(type_of_family == "mother-father family")
#MOTHER MODELS
her_lm_mom_eng<- lm(eng_exp ~ caregiver_1_english_use, data=her_for_lms)
her_lm_mom_fre<- lm(fre_exp ~ caregiver_1_french_use, data=her_for_lms)
her_lm_mom_her<- lm(min_exp ~ caregiver_1_heritage_use, data=her_for_lms)
#Summary of MOTHER models
summary(her_lm_mom_eng)
summary(her_lm_mom_fre)
summary(her_lm_mom_her)
#FATHER MODELS
her_lm_dad_eng<- lm(eng_exp ~ caregiver_2_english_use, data=her_for_lms)
her_lm_dad_fre<- lm(fre_exp ~ caregiver_2_french_use, data=her_for_lms)
her_lm_dad_her<- lm(min_exp ~ caregiver_2_heritage_use, data=her_for_lms)
#Summary of FATHER models
summary(her_lm_dad_eng)
summary(her_lm_dad_fre)
summary(her_lm_dad_her)
#MOTHER AND FATHER MODELS
her_lm_parents_aditive_eng<- lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=her_for_lms)
her_lm_parents_aditive_fre<- lm(fre_exp ~ caregiver_2_french_use + caregiver_1_french_use, data=her_for_lms)
her_lm_parents_aditive_her<- lm(min_exp ~ caregiver_2_heritage_use + caregiver_1_heritage_use, data=her_for_lms)
#Summary of Mother and Father models
summary(her_lm_parents_aditive_eng)
summary(her_lm_parents_aditive_fre)
summary(her_lm_parents_aditive_her)
performance::compare_performance(her_lm_parents_aditive_fre, her_lm_dad_fre, her_lm_mom_fre)
performance::compare_performance(her_lm_parents_aditive_eng, her_lm_dad_eng, her_lm_mom_eng)
performance::compare_performance(her_lm_parents_aditive_her, her_lm_dad_her, her_lm_mom_her)
##Comparison of strategy versus parents models
performance::compare_performance(her_lm_parents_aditive_fre, her_lm_strat_fre)
performance::compare_performance(her_lm_parents_aditive_eng, her_lm_strat_eng)
performance::compare_performance(her_lm_parents_aditive_her, her_lm_strat_her)
