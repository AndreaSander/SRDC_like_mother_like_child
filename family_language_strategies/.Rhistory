library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(broom)
library(janitor)
library(glmmTMB)
library(DHARMa)
library(betareg)
library(emmeans)
library(ggeffects)
library(mvtnorm)
library(boot)
library(bbmle)
library(performance)
library(see)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual exclusions
total_monoling_excluded<- final_data %>%
filter(exp_l1 >95) %>%
filter(exp_l2 <5) %>%
distinct(unique_id) %>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#French-English-Heritage bilingual percentages
FEH <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
FEH_perc<- FEH %>%
group_by(bilingual_type) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#By bilingual type percentages
fre_eng_perc <- FEH %>%
filter(bilingual_type== "fre-eng")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_her_perc <- FEH %>%
filter(bilingual_type=="fre-her")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_eng_perc <- FEH %>%
filter(bilingual_type=="eng-her") %>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#l1 amount of exposure range
min_exp_range <- final_data %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
select(age, strategy, unique_id, anon_baby_id, leq_date)
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15)
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length<- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(nn==2) %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
select(anon_baby_id, first_visit_date, second_visit_date) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
distinct() %>%
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) ##Filter visits that were very close together.
##!! There is a mistake in one date which results in a negative date. Fix.
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
#Family language strategy visualization
####### FOR THE FRENCH- ENGLISH SAMPLE ############
#Calculating how many families use each strategy and its corresponding %
prop_strategy_FE<- FEH %>%
filter(bilingual_type == "fre-eng")%>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#Reordering levels so legend in the graph is in order.
prop_strategy_FE$strategy<- factor(prop_strategy_FE$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
prop_strategy_FE<- prop_strategy_FE %>%
arrange(desc(prop))
#Creating dataframes of each strategy to save their percentages and print them on the text
##Both parents bilingual
both_parents_biling<- prop_strategy_FE %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
##One parent bilingual
one_parent_biling<- prop_strategy_FE %>%
filter(strategy=="one-parent-bilingual") %>%
select(perc)
perc_one_parents_biling<- round(one_parent_biling$perc, 1)
##One parent one lang
one_parent_one_lang<- prop_strategy_FE %>%
filter(strategy=="one-parent-one-lang") %>%
select(perc)
perc_one_parent_one_lang<- round(one_parent_biling$perc, 1)
##one language at home
one_language_at_home<- prop_strategy_FE %>%
filter(strategy=="one-language-at-home") %>%
select(perc)
perc_one_language_at_home<- round(one_parent_biling$perc, 1)
#Waffle plot
V1_FE<- setNames(prop_strategy_FE$n, c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lanaguage", "one-language-at-home", "single-parent"))
figure_1_FE<- waffle(parts = V1_FE, rows=13, colors = c(my_orange, my_yellow, my_blue, my_green, my_purple), keep = T, title = "% Family Strategies for the French-English sample", size=0.6)
#Making a figure of most used strategies divided by lang exposure
for_breakdown <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
group_by(strategy, l1) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
for_breakdown$strategy<- factor(for_breakdown$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
ggplot(for_breakdown, aes(x=l1, y=n, fill=strategy)) +
geom_bar(stat="identity", position="fill") +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple))
for_chisq <- prop_strategy_FE %>%
filter(!strategy %in% c("single-parent", "one-language-at-home"))
xsq_test<- chisq.test(for_chisq$n)
chisq_value<- round(xsq_test$statistic, 2)
chisq_p<- round(xsq_test$p.value, 4)
FE_for_anova_graphs<-FEH %>%
filter(bilingual_type == "fre-eng")
FE_for_anova_graphs$strategy<- factor(FE_for_anova_graphs$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
FE_for_anova_graphs <- FE_for_anova_graphs %>%
filter(!strategy %in% c("single-parent", "one-language-at-home"))
figure_2_a <-ggplot(FE_for_anova_graphs, aes( x=strategy , y=fre_exp, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
ylim(0,100) +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "A. Mean French exposure by strategy")
figure_2_b <-ggplot(FE_for_anova_graphs, aes( x=strategy , y=eng_exp, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
ylim(0,100) +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "B. Mean English exposure by strategy")
figure_2_c <-ggplot(FE_for_anova_graphs, aes( x=strategy , y=exp_l2, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
ylim(0,50) +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.text= element_text(size=20), legend.title= element_text(size=20))+
labs(title= "C. Mean exposure balance by strategy")
figure_2<- figure_2_a + figure_2_b + figure_2_c
FE_for_anovas<- FEH %>%
filter(bilingual_type == "fre-eng") %>%
filter(!strategy == "single-parent") %>%
filter(!strategy == "one-language-at-home") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
FE_anova_model_french <- aov(fre_exp ~ strategy, data= FE_for_anovas)
FE_aov_fre<- tidy(FE_anova_model_french)
FE_tukey_fre_s<- TukeyHSD (FE_anova_model_french)
FE_fre_F <- FE_aov_fre$statistic
FE_fre_p <- FE_aov_fre$p.value
##English ANOVA objects
FE_anova_model_english <- aov(eng_exp ~ strategy, data= FE_for_anovas)
FE_aov_eng<- tidy(FE_anova_model_english)
FE_tukey_eng_s<- TukeyHSD(FE_anova_model_english)
FE_eng_F <- FE_aov_eng$statistic
FE_eng_p <- FE_aov_eng$p.value
#model_performance(anova_model_english)
#check_model(anova_model_english)
## Exposure balance
FE_for_blc_anova <- FEH %>%
filter(bilingual_type == "fre-eng")%>%
filter(!strategy == "single-parent") %>%
filter(!strategy == "one-language-at-home") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
FE_blc_model <- aov(exp_l2 ~ strategy, data= FE_for_blc_anova)
FE_aov_blc<- tidy(FE_blc_model)
FE_tukey_blc_s<- TukeyHSD(FE_blc_model)
model_performance(anova_model_french)
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- FE_for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2))%>%
mutate(caregiver_1_french_use = case_when(caregiver_1_french_use == "regularly" ~3,
caregiver_1_french_use == "sometimes"~ 2,
caregiver_1_french_use == "never"~1))%>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(caregiver_1_english_use == "regularly" ~3,
caregiver_1_english_use == "sometimes"~ 2,
caregiver_1_english_use == "never"~1)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_french_use = case_when(caregiver_2_french_use == "regularly" ~3,
caregiver_2_french_use == "sometimes"~ 2,
caregiver_2_french_use == "never"~1))%>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(caregiver_2_english_use == "regularly" ~3,
caregiver_2_english_use == "sometimes"~ 2,
caregiver_2_english_use == "never"~1))%>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_beta_blc <- FE_for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy, care1_l1, care2_l1, care1_l2, care2_l2, l1, l2) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2))%>%
mutate(caregiver_1_french_use = case_when(caregiver_1_french_use == "regularly" ~3,
caregiver_1_french_use == "sometimes"~ 2,
caregiver_1_french_use == "never"~1))%>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(caregiver_1_english_use == "regularly" ~3,
caregiver_1_english_use == "sometimes"~ 2,
caregiver_1_english_use == "never"~1)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_french_use = case_when(caregiver_2_french_use == "regularly" ~3,
caregiver_2_french_use == "sometimes"~ 2,
caregiver_2_french_use == "never"~1))%>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(caregiver_2_english_use == "regularly" ~3,
caregiver_2_english_use == "sometimes"~ 2,
caregiver_2_english_use == "never"~1)) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use,caregiver_2_english_use) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use, caregiver_2_english_use) %>%
filter(fre_exp != "NA") %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
#Dataframe for balance
for_balance<- for_beta_blc%>%
select(age, exp_l2, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use, caregiver_2_english_use) %>%
filter(exp_l2 != "NA") %>%
mutate(exp_l2 = exp_l2/100,
strategy = as.factor(strategy)) %>%
drop_na()
#Constructing the different beta models
#STRATEGY MODELS
strat_eng<- glmmTMB(eng_exp ~ strategy, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ strategy)
strat_fre <- glmmTMB(fre_exp ~ strategy, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ strategy)
strat_blc<- glmmTMB(exp_l2 ~ strategy, data=for_balance, family= beta_family(link="logit"), dispformula = ~ strategy)
#Summary of STRATEGY models
summary(strat_eng)
summary(strat_fre)
summary(strat_blc)
#AGE MODELS
#just age models
just_age_eng<- glmmTMB(eng_exp ~ age, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~  age)
just_age_fre<- glmmTMB(fre_exp ~ age, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~  age)
just_age_blc<- glmmTMB(exp_l2 ~ age, data=for_balance, family= beta_family(link="logit"), dispformula = ~  age)
#Summary of just age AGE models
summary(just_age_eng)
summary(just_age_fre)
summary(just_age_blc)
#age plus strategy models
age_plus_eng<- glmmTMB(eng_exp ~ age + strategy, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~  age + strategy)
age_plus_fre<- glmmTMB(fre_exp ~ age + strategy, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~  age + strategy)
age_plus_blc<- glmmTMB(exp_l2 ~ age + strategy, data=for_balance, family= beta_family(link="logit"), dispformula = ~  age + strategy)
#Summary of just age AGE models
summary(age_plus_eng)
summary(age_plus_fre)
summary(age_plus_blc)
#age by strategy models
age_by_eng<- glmmTMB(eng_exp ~ age * strategy, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~  age * strategy)
age_by_fre<- glmmTMB(fre_exp ~ age * strategy, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~  age * strategy)
age_by_blc<- glmmTMB(exp_l2 ~ age * strategy, data=for_balance, family= beta_family(link="logit"), dispformula = ~  age * strategy)
#Summary of just age AGE models
summary(age_by_eng)
summary(age_by_fre)
summary(age_by_blc)
#Contrasting of age models
#MOTHER MODELS
mom_beta_eng<- glmmTMB(eng_exp ~ caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_1_english_use)
mom_beta_fre<- glmmTMB(fre_exp ~ caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_1_french_use)
mom_beta_blc_fre<- glmmTMB(exp_l2 ~ caregiver_1_french_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_1_french_use)
mom_beta_blc_eng<- glmmTMB(exp_l2 ~ caregiver_1_english_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_1_english_use)
#Summary of MOTHER models
summary(mom_beta_eng)
summary(mom_beta_fre)
#FATHER MODELS
dad_beta_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use)
dad_beta_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use)
dad_beta_blc_fre<- glmmTMB(exp_l2 ~ caregiver_2_french_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use)
dad_beta_blc_eng<- glmmTMB(exp_l2 ~ caregiver_2_english_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use)
#Summary of FATHER models
summary(dad_beta_eng)
summary(dad_beta_fre)
#MOTHER AND FATHER MODELS
parents_aditive_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use + caregiver_1_english_use)
parents_aditive_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use + caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use + caregiver_1_french_use)
parents_aditive_blc_fre <- glmmTMB(exp_l2 ~ caregiver_2_french_use + caregiver_1_french_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use + caregiver_1_french_use)
parents_aditive_blc_eng <- glmmTMB(exp_l2 ~ caregiver_2_english_use + caregiver_1_english_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use + caregiver_1_english_use)
parents_int_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use * caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use * caregiver_1_english_use)
parents_int_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use * caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use * caregiver_1_french_use)
parents_int_blc_fre <- glmmTMB(exp_l2 ~ caregiver_2_french_use * caregiver_1_french_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use * caregiver_1_french_use)
parents_int_blc_eng <- glmmTMB(exp_l2 ~ caregiver_2_english_use * caregiver_1_english_use, data=for_balance, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use * caregiver_1_english_use)
## MODEL COMPARISONS
#ENGLISH MODELS
test_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng)
test_performance(parents_int_eng, parents_aditive_eng, dad_beta_eng)
performance::compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng)
#FRENCH MODELS
test_performance(parents_int_fre, parents_aditive_fre, mom_beta_fre)
test_performance(parents_int_fre, parents_aditive_fre, dad_beta_fre)
performance::compare_performance(parents_int_fre, parents_aditive_fre, mom_beta_fre, dad_beta_fre)
#BALANCE MODELS
test_performance(parents_int_blc_fre, parents_aditive_blc_fre, mom_beta_blc_fre)
test_performance(parents_int_blc_fre, parents_aditive_blc_fre, dad_beta_blc_fre)
test_performance(parents_int_blc_eng, parents_aditive_blc_eng, mom_beta_blc_eng)
test_performance(parents_int_blc_eng, parents_aditive_blc_eng, dad_beta_blc_eng)
performance::compare_performance(parents_int_blc_fre, parents_aditive_blc_fre, mom_beta_blc_fre, dad_beta_blc_fre,parents_int_blc_eng, parents_aditive_blc_eng, mom_beta_blc_eng, dad_beta_blc_eng)
summary(parents_aditive_fre)
summary(parents_aditive_eng)
summary(parents_aditive_blc_fre)
summary(parents_aditive_blc_eng)
#balance models instead of each caregiver use of french or English calculate some sort of parent balance score like ratio or L1-L2
#Run the models as ordered factor factors and try to run it as a linear regression.
#Summary of BEST FITTING models
summary(parents_int_eng)
summary(parents_int_fre)
summary(parents_int_blc_fre)
summary(parents_int_blc_eng)
## Model comparison
#low root mean square error is better, high R2 is better low AIC and BIC is better
performance::compare_performance(parents_int_blc_fre, parents_int_eng, parents_int_fre, strat_eng)
performance::check_model(parents_int_eng)
performance::check_model(parents_int_blc_fre)
#the best fitting model seems to be the parents french use interaction model to predict balance but wierdly, it is the one with the lower R2. The higher R2 is parents int english
##Notes by Nico: The dispersion model is not interpretable if the conditional model is not significative. If the dispersion model is significative the only thing it means is that the variance between predictors is different from eachother.
##Negative AIC is fine, it is interpreted as usual, the smaller the better
## The R2 marginal calculation is wierd, should run the models in Dhrarma to see if we get a different R2 calculation because dharma might be better suited for non normal models.
## Caregiver graphs
for_careg_graphs <- FE_for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2))%>%
mutate(caregiver_1_french_use = case_when(caregiver_1_french_use == "regularly" ~3,
caregiver_1_french_use == "sometimes"~ 2,
caregiver_1_french_use == "never"~1))%>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(caregiver_1_english_use == "regularly" ~3,
caregiver_1_english_use == "sometimes"~ 2,
caregiver_1_english_use == "never"~1)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome") %>%
mutate(fre_exp = fre_exp/100, eng_exp = eng_exp/100, exp_l2 = exp_l2/100) %>%
drop_na()
figure_10_a <-ggplot(for_careg_graphs, aes( x=caregiver_1_french_use , y=fre_exp)) +
geom_smooth(na.rm=T)+
facet_wrap(vars(caregiver_2_french_use))+
theme_bw() +
ylim(0, 1)
figure_10_b <-ggplot(for_careg_graphs, aes( x=caregiver_1_english_use , y=eng_exp )) +
geom_smooth()+
facet_wrap(vars(caregiver_2_english_use))+
theme_bw() +
ylim(0, 1)
figure_10_c <-ggplot(for_careg_graphs, aes( x=caregiver_1_english_use , y=exp_l2 )) +
geom_smooth()+
facet_wrap(vars(caregiver_2_english_use))+
theme_bw() +
ylim(0, 1)
figure_10_d <-ggplot(for_careg_graphs, aes( x=caregiver_1_french_use , y=exp_l2, color=caregiver_2_french_use )) +
geom_smooth()+
#facet_wrap(vars(caregiver_2_english_use))+
theme_bw() +
ylim(0, 1)
## MODEL COMPARISONS
#ENGLISH MODELS
test_performance(parents_aditive_eng, mom_beta_eng)
performance::compare_performance(parents_aditive_eng, mom_beta_eng, dad_beta_eng)
DHARMa::simulateLRT(parents_aditive_eng)
DHARMa::simulateLRT(parents_aditive_eng, mom_beta_eng)
DHARMa::simulateLRT(mom_beta_eng, parents_aditive_eng, n=250)
library(sjPlot)
sjPlot::tab_model(parents_aditive_eng, show.r2 = T)
performance::compare_performance(parents_int_fre, parents_aditive_fre, mom_beta_fre, dad_beta_fre)
performance::compare_performance(parents_aditive_eng, mom_beta_eng, dad_beta_eng)
lm_parents_aditive_eng<- lm(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=for_beta_eng)
summary(lm_parents_aditive_eng)
lm_mom_beta_eng<- lm(eng_exp ~ caregiver_1_english_use, data=for_beta_eng)
summary(lm_mom_beta_eng)
anova(lm_parents_aditive_eng, lm_mom_beta_eng)
performance::compare_performance(lm_mom_beta_eng, lm_parents_aditive_eng)
