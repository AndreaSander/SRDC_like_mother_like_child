care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "one-language-at-home",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1 %in% c("never", "NA") & care2_l2=="regularly"~ "one-language-at-home",
care1_l1=="sometimes" & care1_l2 %in% c("never", "NA") & care2_l1=="sometimes" &care2_l2 %in% c("never", "NA")~ "one-language-at-home",
care1_l1 %in% c("never", "NA") & care1_l2=="sometimes" & care2_l1 %in% c("never", "NA") & care2_l2=="sometimes"~ "one-language-at-home",
#single-parent: Family in which there is only one caregiver
care1_l1 %in% c("never", "NA") & care1_l2 %in% c("never", "NA") & care1_l3 %in% c("never", "NA") & care1_l4 %in% c("never", "NA") ~ "single-parent",
care2_l1 %in% c("never", "NA") & care2_l2 %in% c("never", "NA") & care2_l3 %in% c("never", "NA") & care2_l4 %in% c("never", "NA") ~ "single-parent"
))
#Calculate the proportion for the different strategies
prop_strategy<-final_data_strat%>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n))
# I decided to exclude "true" monolinguals characterized here to the best of our abilities as children whose families use one language at home strategy, and the childcare language is the same as the one language at home strategy = they are being exposed to a single language = most likely not a bilingual strategy.
final_data_strat <-
final_data_strat %>%
mutate(bilinugal_strategy= case_when(strategy=="one-language-at-home" & childcare_l1 == l1 & childcare_l2 %in% c(NA, "NA")  ~ "no",
strategy=="one-language-at-home" & childcare_l2 == l1 & childcare_l1 %in% c(NA, "NA") ~"no",
strategy=="one-language-at-home" & childcare_l1 %in% c(NA, "NA") & childcare_l2 %in% c(NA, "NA") ~"no",
TRUE~"yes")) %>%
filter(bilinugal_strategy=="yes")
#In the end, after discussion we decided to filter all the strictly monolinguals because we are truly interested in bilinguals mainly.
final_data_strat <-
final_data_strat %>%
filter(exp_l1 <95) %>%
filter(exp_l2 >5)
range(final_data_strat$exp_l1) #47-94
range(final_data_strat$exp_l2) #6-50
#save(final_data_strat, file=here("anonymized_data/final_data_strat.Rda"))
final_data_strat <- final_data_strat %>%
mutate(lang_status = case_when(
l2=="NA" ~ "monolingual",
exp_l2== 0 ~ "monolingual",
l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "both_maj",
l1 %in% c("French", "English") & !(l2 %in% c("French", "English")) ~ "one_maj",
!(l1 %in% c("French", "English")) & l2 %in% c("French", "English") ~ "one_maj",
TRUE ~ "both_min"
))
#do check that the monolinguals are actually monolinguals and not both min
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter (visit==1)
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy, lang_status) %>%
filter(lang_status != "monolingual") %>%
filter(gender != "NA")
#filtering the single parent cases because there are not enough to have any power statistically.
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent")
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy, lang_status) %>%
filter(lang_status != "monolingual") %>%
filter(gender != "NA")
for_beta_blc <- for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy, lang_status) %>%
filter(lang_status != "monolingual") %>%
filter(gender != "NA")
for_blc_anova <- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy, lang_status) %>%
filter(lang_status != "monolingual") %>%
filter(gender != "NA")
for_beta_blc <- for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy, lang_status) %>%
filter(lang_status != "monolingual") %>%
filter(gender != "NA")
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, lang_status, anon_baby_id) %>%
filter(eng_exp != "NA") %>%
filter(eng_exp !=100) %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy),
lang_status = as.factor(lang_status))
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, lang_status, anon_baby_id) %>%
filter(fre_exp != "NA") %>%
filter(fre_exp != 100) %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy),
lang_status = as.factor(lang_status))
# Dataframe for minority language exposure
for_beta_min <- for_beta %>%
select(age, min_exp, strategy, lang_status, anon_baby_id) %>%
filter(min_exp != "NA") %>%
filter(min_exp !=100) %>%
mutate(min_exp = min_exp/100,
strategy = as.factor(strategy),
lang_status = as.factor(lang_status))
#Dataframe for balance
for_balance<- for_beta_blc%>%
select(age, exp_l2, strategy, lang_status, anon_baby_id) %>%
filter(exp_l2 != "NA") %>%
mutate(exp_l2 = exp_l2/100,
strategy = as.factor(strategy),
lang_status = as.factor(lang_status))
m4b <- glmmTMB(eng_exp ~ strategy * age, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ strategy * age)
summary(m4b) # No significant effects, except for the intercept which is both parents bilingual?
# We run model diagnostics with DHARMa
sim_m4b <- simulateResiduals(m4b)
plot(sim_m4b) # MODEL OK!
testDispersion(sim_m4b) # MODEL OK!
# We can plot the fixed effects for m4b, the best model so far (very interesting!)
m4b_effects <- ggpredict(m4b, terms = c("age", "strategy"))
custom_palette = c("#BD081C","#0099FF", "#00B489", "#FF8F00")
plot(m4b_effects, add.data = F, colors= custom_palette, alpha=.2)
# We can estimate and compare the marginal means of the response variable across different levels of "strategy", while accounting for the effect of "age" and the varying dispersion parameter. This code computes pairwise comparisons of the estimated marginal means of eng_exp across the different levels of "strategy", while holding "age" constant at its mean value.
emtrends(m4b, pairwise ~ strategy, var="age") # trend for one-language-at-home significantly different from that of one parent-bilingual
# MODEL FOR FRENCH EXPOSURE + VISUALIZATION
m5 <- glmmTMB(fre_exp ~ strategy * age, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ strategy * age)
summary(m5) # same as English only for the intercept.
# We run model diagnostics with DHARMa
sim_m5 <- simulateResiduals(m5)
plot(sim_m5) # MODEL OK!
testDispersion(sim_m5) # MODEL OK!
# We can plot the fixed effects for m5, the best model so far
m5_effects <- ggpredict(m5, terms = c("age", "strategy"))
custom_palette = c("#BD081C","#0099FF", "#00B489", "#FF8F00")
plot(m5_effects, add.data = F, colors= custom_palette, alpha=.2)
# We can estimate and compare the marginal means of the response variable across different levels of "strategy", while accounting for the effect of "age" and the varying dispersion parameter.
emtrends(m5, pairwise ~ strategy, var="age") # no significant results
# MODEL FOR MINORITY LANGUAGE EXPOSURE + VISUALIZATION
m6 <- glmmTMB(min_exp ~ strategy * age, data=for_beta_min, family= beta_family(link="logit"), dispformula = ~ strategy + age)
summary(m6) # Significant effects for one-language-at-home and its interaction with age and with age is a significant predictor.
# We run model diagnostics with DHARMa
sim_m6 <- simulateResiduals(m6)
plot(sim_m6) # MODEL OK!
testDispersion(sim_m6) # MODEL OK!
# We can plot the fixed effects for m6, the best model so far (very interesting!)
m6_effects <- ggpredict(m6, terms = c("age", "strategy"))
custom_palette = c("#BD081C","#0099FF", "#00B489", "#FF8F00")
plot(m6_effects, add.data = F, colors= custom_palette, alpha=.2)
# We can estimate and compare the marginal means of the response variable across different levels of "strategy", while accounting for the effect of "age" and the varying dispersion parameter.
emtrends(m6, pairwise ~ strategy, var="age") # # trend for one-language-at-home significantly different from that of one parent-bilingual
m7<- glmmTMB(exp_l2 ~ strategy * age, data=for_balance, family= beta_family(link="logit"), dispformula = ~ strategy + age)
summary(m7)
m7_effects <- ggpredict(m7, terms = c("age", "strategy"))
custom_palette = c("#BD081C","#0099FF", "#00B489", "#FF8F00")
plot(m7_effects, add.data = F, colors= custom_palette, alpha=.2)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 100, digits = 4)
library(lubridate)
library(sparkline)
library(webshot)
library(htmlwidgets)
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual strategies count
monoling_strategies_count <-
final_data_no_exc %>%
mutate(monoling_strategy = case_when(
care1_l1=="regularly" & care1_l2 %in% c("never", "NA") & care2_l1=="regularly" &care2_l2 %in% c("never", "NA")~ "yes",
care1_l1 %in% c("never", "NA") & care1_l2=="regularly" & care2_l1 %in% c("never", "NA") & care2_l2=="regularly"~ "yes",
TRUE~"No"))%>%
mutate(bilinugal_strategy= case_when(monoling_strategy=="yes" & childcare_l1 == l1 & childcare_l2 %in% c(NA, "NA")  ~ "no",
monoling_strategy=="yes"& childcare_l2 == l1 & childcare_l1 %in% c(NA, "NA") ~"no",
monoling_strategy=="yes" & childcare_l1 %in% c(NA, "NA") & childcare_l2 %in% c(NA, "NA") ~"no",
TRUE~"yes")) %>%
filter(bilinugal_strategy=="no") %>%
distinct(unique_id)%>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#l1 percentages
l1_perc <- first_visit_only %>%
group_by(l1) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_l1 <- l1_perc %>%
filter(l1=="French") %>%
select(perc)
eng_l1 <- l1_perc %>%
filter(l1=="English") %>%
select(perc)
min_l1<- abs(fre_l1-eng_l1)
#l2 percentages
l2_perc <- first_visit_only %>%
group_by(l2) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_l2 <- l2_perc %>%
filter(l2=="French") %>%
select(perc)
eng_l2 <- l2_perc %>%
filter(l2=="English") %>%
select(perc)
min_l2<- abs(fre_l2-eng_l2)
#l1 amount of exposure range
min_exp_range <- final_data %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
select(age, strategy, unique_id, anon_baby_id, leq_date)
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15)
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length<- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(nn==2) %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
select(anon_baby_id, first_visit_date, second_visit_date) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
distinct() %>%
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) ##Filter visits that were very close together.
##!! There is a mistake in one date which results in a negative date. Fix.
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
collapse_rows_df <- function(df, variable){
group_var <- enquo(variable)
df %>%
group_by(!! group_var) %>%
mutate(groupRow = 1:n()) %>%
ungroup() %>%
mutate(!!quo_name(group_var) := ifelse(groupRow == 1, as.character(!! group_var), "")) %>%
select(-c(groupRow))
}
strats_table<- final_data_strat %>%
select(c(strategy, care1_l1, care1_l2, care2_l1, care2_l2))%>%
rename(caregiver_A_L1 = care1_l1)%>%
rename(caregiver_A_L2 = care1_l2)%>%
rename(caregiver_B_L1 = care2_l1)%>%
rename(caregiver_B_L2 = care2_l2)%>%
arrange(strategy) %>%
distinct() %>%
collapse_rows_df(strategy)
color_formatter <- formatter(
"span",
style = x ~ style(
color = 'black',
'background-color' =
ifelse(x == "regularly", "#a1d76a", ifelse( x=="sometimes","#ffffbf", if_else(x=="never", "#e9a3c9", "white")))
))
formattable(strats_table,
list(
`caregiver_A_L1`= color_formatter,
`caregiver_A_L2`= color_formatter,
`caregiver_B_L1`= color_formatter,
`caregiver_B_L2`= color_formatter
)) %>%
as.datatable(options = list(pageLength = 35)) %>%
spk_add_deps() -> w
htmlwidgets::saveWidget(w, "table.html", selfcontained = TRUE)
webshot::webshot(url = "table.html", file = "table.png",
vwidth = 1200, vheight = 275)
#Family language strategy visualization
#Calculating how many families use each strategy and its corresponding %
prop_strategy<- first_visit_only %>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#Reordering levels so legend in the graph is in order.
prop_strategy$strategy<- factor(prop_strategy$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
prop_strategy<- prop_strategy %>%
arrange(desc(prop))
#Creating dataframes of each strategy to save their percentages and prnt them on the text
##Both parents bilingual
both_parents_biling<- prop_strategy %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
##One parent bilingual
one_parent_biling<- prop_strategy %>%
filter(strategy=="one-parent-bilingual") %>%
select(perc)
perc_one_parents_biling<- round(one_parent_biling$perc, 1)
##One parent one lang
one_parent_one_lang<- prop_strategy %>%
filter(strategy=="one-parent-one-lang") %>%
select(perc)
perc_one_parent_one_lang<- round(one_parent_biling$perc, 1)
##one language at home
one_language_at_home<- prop_strategy %>%
filter(strategy=="one-language-at-home") %>%
select(perc)
perc_one_language_at_home<- round(one_parent_biling$perc, 1)
#Waffle plot
figure_1<- ggplot(prop_strategy, aes(fill=strategy, values= n, na.rm=T)) +
geom_waffle (n_rows=22, color="white")+
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
labs(x="", title = "Proportion of Use of Family Strategies")+
theme(axis.text.x= element_blank(), axis.ticks = element_blank())+
coord_equal()+
theme_void()
for_chisq <- prop_strategy %>%
filter(strategy=="single-parent") # filter single parents because the cell size is small
xsq_test<- chisq.test(prop_strategy$n)
chisq_value<- round(xsq_test$statistic, 2)
chisq_p<- round(xsq_test$p.value, 4)
fre_by_strategy <- first_visit_only  %>%
select(c(strategy, fre_exp)) %>%
group_by(strategy) %>%
dplyr::summarize(
sd= sd(fre_exp, na.rm=TRUE),
mean= mean(fre_exp,  na.rm=TRUE)) %>%
arrange(desc("mean(fre_exp, na.rm=TRUE)"))
fre_by_strategy$strategy<- factor(fre_by_strategy$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
figure_2_a <-ggplot(fre_by_strategy, aes( x=strategy , y=mean, fill = strategy, ymin = mean, ymax = mean+sd )) +
geom_col() +
geom_errorbar(width=0.2)+
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank())+
labs(title= "Mean french exposure by strategy")
eng_by_strategy <- first_visit_only  %>%
select(c(strategy, eng_exp)) %>%
group_by(strategy) %>%
dplyr::summarize(
sd= sd(eng_exp, na.rm=TRUE),
mean= mean(eng_exp,  na.rm=TRUE)) %>%
arrange(desc("mean(eng_exp, na.rm=TRUE)"))
eng_by_strategy$strategy<- factor(eng_by_strategy$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
figure_2_b <-ggplot(eng_by_strategy, aes( x=strategy , y=mean, fill = strategy, ymin = mean, ymax = mean+sd )) +
geom_col() +
geom_errorbar(width=0.2)+
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank())+
labs(title= "Mean english exposure by strategy")
min_by_strategy <- first_visit_only  %>%
select(c(strategy, min_exp)) %>%
group_by(strategy) %>%
dplyr::summarize(
sd= sd(min_exp, na.rm=TRUE),
mean= mean(min_exp,  na.rm=TRUE)) %>%
arrange(desc("mean(min_exp, na.rm=TRUE)"))
min_by_strategy$strategy<- factor(min_by_strategy$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
figure_2_c <-ggplot(min_by_strategy, aes( x=strategy , y=mean, fill = strategy, ymin = mean, ymax = mean+sd )) +
geom_col() +
geom_errorbar(width=0.2)+
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank())+
labs(title= "Mean heritage language exposure by strategy")
balance <- first_visit_only  %>%
select(c(strategy, exp_l2)) %>%
group_by(strategy) %>%
dplyr::summarize(
sd= sd(exp_l2, na.rm=TRUE),
mean= mean(exp_l2,  na.rm=TRUE)) %>%
arrange(desc("mean(exp_l2, na.rm=TRUE)"))
balance$strategy<- factor(balance$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
figure_2_d<- ggplot(balance, aes( x=strategy , y=mean, fill = strategy, ymin = mean, ymax = mean+sd )) +
geom_col() +
geom_errorbar(width=0.2)+
#scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank())+
labs(title= "Mean exposure balance by strategy")
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
anova_model_french <- aov(fre_exp ~ strategy, data= for_anovas_f)
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
anova_model_french <- aov(fre_exp ~ strategy, data= for_anovas)
aov_fre<- tidy(anova_model_french)
tukey_fre_s<- TukeyHSD (anova_model_french)
tukey_fre<- tidy(tukey_fre_s)
fre_F <- aov_fre$statistic
fre_p <- aov_fre$p.value
library(performance)
model_performance(anova_model_french)
check_model(anova_model_french)
##English ANOVA objects
anova_model_english <- aov(eng_exp ~ strategy, data= for_anovas)
aov_eng<- tidy(anova_model_english)
tukey_eng_s<- TukeyHSD(anova_model_english)
tukey_eng<- tidy(tukey_eng_s)
eng_F <- aov_eng$statistic
eng_p <- aov_eng$p.value
model_performance(anova_model_english)
check_model(anova_model_english)
##Heritage langauge ANOVA Objects
anova_model_heritage <- aov(min_exp ~ strategy, data= for_anovas)
aov_min<- tidy(anova_model_heritage)
tukey_min_s<-TukeyHSD(anova_model_heritage)
tukey_min <- tidy(tukey_min_s)
min_F <- aov_min$statistic
min_p <- aov_min$p.value
model_performance(anova_model_heritage)
check_model(anova_model_heritage)
######### FOR BALANCE EXPOSURE ANOVA ########
for_blc_anova <- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
blc_model <- aov(exp_l2 ~ strategy, data= for_blc_anova)
tidy(blc_model)
blc_tukey<- tukey_hsd(blc_model)
