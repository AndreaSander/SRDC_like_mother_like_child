stat_summary(geom="bar")+
stat_summary() +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "D. Mean exposure balance by strategy")
figure_2<- figure_2_a + figure_2_b + figure_2_c + figure_2_d
print(figure_2)
## LONGITUDINAL DATA ANALYSES ##
########### Count proportions ##########
v1_strat_prop <- longitudinal_data_analyses %>%
select(visit, strategy) %>%
filter(visit==1) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
v2_strat_prop <- longitudinal_data_analyses %>%
select(visit, strategy) %>%
filter(visit==2) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
percentages_visits <- merge(v1_strat_prop, v2_strat_prop, by="strategy")
percentages_visits <- percentages_visits %>%
select(strategy, n.x, n.y, perc.x, perc.y) %>%
rename(n_first_visit = n.x) %>%
rename(n_second_visit = n.y) %>%
rename(percentage_first_visit = perc.x) %>%
rename(percentage_second_visit = perc.y)
perc_family_change <- longitudinal_data_analyses %>%
select(visit, strategy, anon_baby_id) %>%
filter(visit == c(1,2)) %>%
filter(!strategy == "single-parent") %>%
pivot_wider(names_from = visit, values_from = strategy) %>%
rename(visit_1 = "1") %>%
rename(visit_2 = "2") %>%
mutate(change_strat = case_when(visit_1 == visit_2 ~"no_change",
TRUE~ "change")) %>%
group_by(change_strat) %>%
tally() %>%
mutate(perc = (n/sum(n)*100))
change_perc<- perc_family_change %>%
filter(change_strat == "change")
change_perc <- change_perc$perc
no_change_perc<- 100-change_perc
###########################
############ make sankey ########
wider_longitudinal <- longitudinal_data_analyses %>%
select(anon_baby_id, visit, strategy) %>%
filter(str_detect(strategy, "single-parent", negate=T))
wider_longitudinal <- pivot_wider(wider_longitudinal,
names_from = visit, values_from = strategy ) %>%
rename(visit_1 = "1", visit_2 = "2", visit_3 ="3", visit_4 ="4" )
for_sankey <- wider_longitudinal %>%
make_long(visit_1, visit_2)
for_sankey <- for_sankey %>%
mutate(node= fct_relevel (node, "both-parents-bilingual", "one-parent-bilingual", "one-language-at-home", "one-parent-one-language"))
p1<- ggplot(for_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node )) +
geom_sankey()
p2<- p1+
scale_fill_manual(name= "x", values = c(my_yellow, my_blue, my_orange, my_green))
p2<- p2 +
geom_sankey_label(size=3, color="black", fill="white")+
theme_bw()+
theme(legend.position = "none", axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title="Stability of Family Strategies Across Visit", x="")
print(p2)
p2<- p1+
scale_fill_manual(name= "x", values = c(my_orange, my_yellow, my_blue, my_green, my_blue))
p2<- p2 +
geom_sankey_label(size=3, color="black", fill="white")+
theme_bw()+
theme(legend.position = "none", axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title="Stability of Family Strategies Across Visit", x="")
print(p2)
p2<- p1+
scale_fill_manual(name= "x", values = c(my_orange, my_yellow, my_green, my_blue))
p2<- p2 +
geom_sankey_label(size=3, color="black", fill="white")+
theme_bw()+
theme(legend.position = "none", axis.ticks = element_blank(), axis.text.y = element_blank()) +
labs(title="Stability of Family Strategies Across Visit", x="")
print(p2)
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
anova_model_french <- aov(fre_exp ~ strategy, data= for_anovas)
aov_fre<- tidy(anova_model_french)
tukey_fre_s<- TukeyHSD (anova_model_french)
tukey_fre<- tidy(tukey_fre_s)
fre_F <- aov_fre$statistic
fre_p <- aov_fre$p.value
library(performance)
model_performance(anova_model_french)
check_model(anova_model_french)
##English ANOVA objects
anova_model_english <- aov(eng_exp ~ strategy, data= for_anovas)
aov_eng<- tidy(anova_model_english)
tukey_eng_s<- TukeyHSD(anova_model_english)
tukey_eng<- tidy(tukey_eng_s)
eng_F <- aov_eng$statistic
eng_p <- aov_eng$p.value
model_performance(anova_model_english)
check_model(anova_model_english)
##Heritage langauge ANOVA Objects
anova_model_heritage <- aov(min_exp ~ strategy, data= for_anovas)
aov_min<- tidy(anova_model_heritage)
tukey_min_s<-TukeyHSD(anova_model_heritage)
tukey_min <- tidy(tukey_min_s)
min_F <- aov_min$statistic
min_p <- aov_min$p.value
model_performance(anova_model_heritage)
check_model(anova_model_heritage)
######### FOR BALANCE EXPOSURE ANOVA ########
for_blc_anova <- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
blc_model <- aov(exp_l2 ~ strategy, data= for_blc_anova)
tidy(blc_model)
blc_tukey<- tukey_hsd(blc_model)
tidy(blc_model)
blc_tukey<- tukey_hsd(blc_model)
print(blc_tukey)
model_performance(anova_model_french)
check_model(anova_model_french)
model_performance(anova_model_english)
model_performance(anova_model_heritage)
model_performance(blc_model)
plot(anova_model_french)
testDispersion(anova_model_french)
check_model(blc_model)
check_model(anova_model_french)
check_model(anova_model_english)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 100, digits = 4)
library(lubridate)
library(sparkline)
library(webshot)
library(htmlwidgets)
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(broom)
library(janitor)
library(glmmTMB)
library(DHARMa)
library(betareg)
library(emmeans)
library(ggeffects)
library(mvtnorm)
library(boot)
library(bbmle)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual exclusions
total_monoling_excluded<- final_data %>%
filter(exp_l1 >95) %>%
filter(exp_l2 <5) %>%
distinct(unique_id) %>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#l1 percentages
l1_perc <- first_visit_only %>%
group_by(l1) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_l1 <- l1_perc %>%
filter(l1=="French") %>%
select(perc)
eng_l1 <- l1_perc %>%
filter(l1=="English") %>%
select(perc)
min_l1<- abs(fre_l1-eng_l1)
#l2 percentages
l2_perc <- first_visit_only %>%
group_by(l2) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_l2 <- l2_perc %>%
filter(l2=="French") %>%
select(perc)
eng_l2 <- l2_perc %>%
filter(l2=="English") %>%
select(perc)
min_l2<- abs(fre_l2-eng_l2)
#l1 amount of exposure range
min_exp_range <- final_data %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
select(age, strategy, unique_id, anon_baby_id, leq_date)
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15)
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length<- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(nn==2) %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
select(anon_baby_id, first_visit_date, second_visit_date) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
distinct() %>%
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) ##Filter visits that were very close together.
##!! There is a mistake in one date which results in a negative date. Fix.
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
#Family language strategy visualization
#Calculating how many families use each strategy and its corresponding %
prop_strategy<- first_visit_only %>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#Reordering levels so legend in the graph is in order.
prop_strategy$strategy<- factor(prop_strategy$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
prop_strategy<- prop_strategy %>%
arrange(desc(prop))
#Creating dataframes of each strategy to save their percentages and prnt them on the text
##Both parents bilingual
both_parents_biling<- prop_strategy %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
##One parent bilingual
one_parent_biling<- prop_strategy %>%
filter(strategy=="one-parent-bilingual") %>%
select(perc)
perc_one_parents_biling<- round(one_parent_biling$perc, 1)
##One parent one lang
one_parent_one_lang<- prop_strategy %>%
filter(strategy=="one-parent-one-lang") %>%
select(perc)
perc_one_parent_one_lang<- round(one_parent_biling$perc, 1)
##one language at home
one_language_at_home<- prop_strategy %>%
filter(strategy=="one-language-at-home") %>%
select(perc)
perc_one_language_at_home<- round(one_parent_biling$perc, 1)
#Waffle plot
V1<- setNames(prop_strategy$n, c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lanaguage", "one-language-at-home", "single-parent"))
figure_1<- waffle(parts = V1, rows=20, colors = c(my_orange, my_yellow, my_blue, my_green, my_purple), keep = T, title = "Proportion of Use of Family Strategies", size=0.6)
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_anova_graphs<-first_visit_only
for_anova_graphs$strategy<- factor(for_anova_graphs$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
figure_2_a <-ggplot(for_anova_graphs, aes( x=strategy , y=fre_exp, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "A. Mean French exposure by strategy")
figure_2_b <-ggplot(for_anova_graphs, aes( x=strategy , y=eng_exp, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.text= element_text(size=20), legend.title= element_text(size=20))+
labs(title= "B. Mean English exposure by strategy")
figure_2_c <-ggplot(for_anova_graphs, aes( x=strategy , y=min_exp, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "C. Mean HL exposure by strategy")
figure_2_d <-ggplot(for_anova_graphs, aes( x=strategy , y=exp_l2, fill = strategy )) +
stat_summary(geom="bar")+
stat_summary() +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple)) +
theme_bw() +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "D. Mean exposure balance by strategy")
figure_2<- figure_2_a + figure_2_b + figure_2_c + figure_2_d
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
anova_model_french <- aov(fre_exp ~ strategy, data= for_anovas)
aov_fre<- tidy(anova_model_french)
tukey_fre_s<- TukeyHSD (anova_model_french)
tukey_fre<- tidy(tukey_fre_s)
fre_F <- aov_fre$statistic
fre_p <- aov_fre$p.value
##English ANOVA objects
anova_model_english <- aov(eng_exp ~ strategy, data= for_anovas)
aov_eng<- tidy(anova_model_english)
tukey_eng_s<- TukeyHSD(anova_model_english)
tukey_eng<- tidy(tukey_eng_s)
eng_F <- aov_eng$statistic
eng_p <- aov_eng$p.value
model_performance(anova_model_english)
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_beta_blc <- for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_anovas<- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
anova_model_french <- aov(fre_exp ~ strategy, data= for_anovas)
aov_fre<- tidy(anova_model_french)
tukey_fre_s<- TukeyHSD (anova_model_french)
tukey_fre<- tidy(tukey_fre_s)
fre_F <- aov_fre$statistic
fre_p <- aov_fre$p.value
##English ANOVA objects
anova_model_english <- aov(eng_exp ~ strategy, data= for_anovas)
aov_eng<- tidy(anova_model_english)
tukey_eng_s<- TukeyHSD(anova_model_english)
tukey_eng<- tidy(tukey_eng_s)
eng_F <- aov_eng$statistic
eng_p <- aov_eng$p.value
#model_performance(anova_model_english)
check_model(anova_model_english)
for_blc_anova <- first_visit_only %>%
filter(!strategy == "single-parent") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-language-at-home"~"OneLanguageAtHome",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
# Create the dataframes to run the models for each language. Monolinguals are excluded, as are the rows
# where exposure for a given language equals 100. Since exposure is on a 0-100 scale and the beta distributions
# works with values ranging from 0-1, exposure is divided by 100.
for_beta <- for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, min_exp, strategy) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_beta_blc <- for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy))
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, anon_baby_id) %>%
filter(fre_exp != "NA") %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy))
# Dataframe for minority language exposure
for_beta_min <- for_beta %>%
select(age, min_exp, strategy, anon_baby_id) %>%
filter(min_exp != "NA") %>%
mutate(min_exp = min_exp/100,
strategy = as.factor(strategy))
#Dataframe for balance
for_balance<- for_beta_blc%>%
select(age, exp_l2, strategy, anon_baby_id) %>%
filter(exp_l2 != "NA") %>%
mutate(exp_l2 = exp_l2/100,
strategy = as.factor(strategy))
#Constructing the different beta models
beta_eng<- glmmTMB(eng_exp ~ strategy * age, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ strategy * age)
beta_fre<- glmmTMB(fre_exp ~ strategy * age, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ strategy * age)
beta_min<- glmmTMB(min_exp ~ strategy * age, data=for_beta_min, family= beta_family(link="logit"), dispformula = ~ strategy * age)
beta_blc<- glmmTMB(exp_l2 ~ strategy * age, data=for_balance, family= beta_family(link="logit"), dispformula = ~ strategy * age)
#predicting models' effects
beta_eng_effects <- ggpredict(beta_eng, terms = c("age", "strategy"))
beta_fre_effects <- ggpredict(beta_fre, terms = c("age", "strategy"))
beta_min_effects <- ggpredict(beta_min, terms = c("age", "strategy"))
beta_blc_effects <- ggpredict(beta_blc, terms = c("age", "strategy"))
#Graphing each model's predicted effects
custom_palette = c(my_orange, my_yellow, my_blue)
figure_3a<- plot(beta_eng_effects, add.data = F, colors= custom_palette, alpha=.05)+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=22), legend.position = "none")+
labs(title= "A. Predicted values of English")
figure_3b<- plot(beta_fre_effects, add.data = F, colors= custom_palette, alpha=.05)+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=22), legend.text= element_text(size=20), legend.title= element_text(size=20))+
labs(title= "B. Predicted values of French")
figure_3c<- plot(beta_min_effects, add.data = F, colors= custom_palette, alpha=.05) +
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=22), legend.position = "none")+
labs(title= "C. Predicted values of HL")
figure_3d<- plot(beta_blc_effects, add.data = F, colors= custom_palette, alpha=.05)+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=22), legend.position = "none")+
labs(title= "D. Predicted values of Exposure Balance")
#Creating a combined figure of all the figures above
figure_3<- figure_3a + figure_3b + figure_3c + figure_3d
#Summary of beta regression results
summary(beta_eng)
summary(beta_fre)
summary(beta_min)
summary(beta_blc)
