ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length <- longitudinal_data_analyses %>%
filter(visit <= 2)
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
## LONGITUDINAL DATA ANALYSES ##
FE_long_analyses<- longitudinal_data_analyses %>%
filter(bilingual_type=="fre-eng")
########### Count proportions ##########
v1_strat_prop <- FE_long_analyses %>%
select(visit, strategy) %>%
filter(visit==1) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_strat_prop <- FE_long_analyses %>%
select(visit, strategy) %>%
filter(visit==2) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally(name = "n_second_visit")%>%
mutate(proportion_second_visit = n_second_visit/sum(n_second_visit)) %>%
mutate(percentage_second_visit= proportion_second_visit*100)
FE_percentages_visits <- merge(v1_strat_prop, v2_strat_prop, by="strategy")
###########################
###################### GLMER MODEL To learn weather changing strategy was related to the time between visits ########
FE_for_long_glmer<- FE_long_analyses %>%
select(visit, strategy, length_between_visits, anon_baby_id) %>%
filter(visit %in% c(1,2)) %>%
filter(!strategy == "single-parent") %>%
pivot_wider(names_from = visit, values_from = strategy) %>%
rename(visit_1 = "1") %>%
rename(visit_2 = "2") %>%
mutate(change_strat = case_when(visit_1 == visit_2 ~"no_change",
TRUE~ "change"))
FE_for_long_glmer<- FE_for_long_glmer
FE_count_change <- FE_for_long_glmer %>%
group_by(change_strat) %>%
tally() %>%
mutate(perc = (n/sum(n)*100))
FE_strategy_change <- FE_for_long_glmer %>%
filter(change_strat=="change") %>%
group_by(visit_2) %>%
tally() %>%
mutate(perc = (n/sum(n)*100))
long_model<- glmer(as.factor(change_strat) ~ scale(length_between_visits) +(1|anon_baby_id), data = FE_for_long_glmer, family="binomial")
summary(long_model)
############ make sankey graph ########
FE_for_sankey <- FE_for_long_glmer %>%
select(-change_strat) %>%
make_long("visit_1", "visit_2")
FE_for_sankey <- FE_for_sankey %>%
mutate(node= fct_relevel (node, "both-parents-bilingual", "one-parent-bilingual", "one-language-at-home", "one-parent-one-lang"))
FE_p1<- ggplot(FE_for_sankey, aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node )) +
geom_sankey()
figure_2 <- FE_p1+
scale_fill_manual(name= "x", values = c(my_orange, my_yellow, my_blue))
figure_2<- figure_2 +
geom_sankey_label(size=10, color="black", fill="white")+
theme_bw()+
theme(axis.text.x = element_text(size=35),axis.title = element_text(size=25), plot.title = element_text(size=25), legend.position = "none", axis.ticks = element_blank(), axis.text.y = element_blank())
ggsave(file="Figure_2.png", width=25, height=18, dpi=300)
##Mother sankey
mom_long<- FE_long_analyses %>% #this results in a dataframe that has one row per kid who had 2 FR-EN visits.
filter(type_of_family == "mother-father family") %>%
filter(!strategy=="single-parent") %>%
filter(visit %in% c(1,2)) %>%
select(anon_baby_id, l1, l2, care1_l1, care1_l2, visit, length_between_visits) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2),
visit = paste0("Visit_", visit)) %>%
rename("Fre" = caregiver_1_french_use,
"Eng" = caregiver_1_english_use) %>%
select(-care1_l1, -care1_l2, -l1, -l2) %>%
pivot_wider(names_from = visit, values_from = c(Fre, Eng)) %>%
rename_at(vars(starts_with("Fre")), ~ paste0(str_remove(., "Fre_"), "_Fre")) %>%
rename_at(vars(starts_with("Eng")), ~  paste0(str_remove(., "Eng_"), "_Eng")) %>%
drop_na()
mom_long_french<- mom_long %>%
select(anon_baby_id, length_between_visits, Visit_1_Fre, Visit_2_Fre)
mom_long_english<- mom_long %>%
select(anon_baby_id, length_between_visits, Visit_1_Eng, Visit_2_Eng)
mom_long_fre_s <- mom_long_french %>%
make_long("Visit_1_Fre","Visit_2_Fre")
#Changeing the levels so that the graph is in order
mom_long_fre_s$node <- factor(mom_long_fre_s$node, levels= c("never","sometimes", "regularly"))
mom_long_fre_s$next_node <- factor(mom_long_fre_s$next_node, levels= c("never","sometimes","regularly"))
mom_long_eng_s <- mom_long_english %>%
make_long("Visit_1_Eng", "Visit_2_Eng")
mom_long_eng_s$node <- factor(mom_long_eng_s$node, levels= c("never","sometimes", "regularly"))
mom_long_eng_s$next_node <- factor(mom_long_eng_s$next_node, levels= c("never","sometimes","regularly"))
v1_mother_prop_fre <- mom_long %>%
select(Visit_1_Fre, Visit_1_Eng) %>%
group_by(Visit_1_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_mother_prop_fre <- mom_long %>%
select(Visit_2_Fre, Visit_2_Eng) %>%
group_by(Visit_2_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v1_mother_prop_eng <- mom_long %>%
select(Visit_1_Fre, Visit_1_Eng) %>%
group_by(Visit_1_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_mother_prop_eng <- mom_long %>%
select(Visit_2_Fre, Visit_2_Eng) %>%
group_by(Visit_2_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
figure_3_a <- ggplot(mom_long_fre_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
geom_sankey_label(size=10, color="black", fill="white")+
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"))+
theme_bw()+
theme(axis.text.x = element_text(size=30),legend.position = "none", plot.title = element_text(size=35)) +
labs(title= "A. Mothers' change of language use French")
figure_3_b <- ggplot(mom_long_eng_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"))+
geom_sankey_label(size=10, color="black", fill="white")+
theme_bw()+
theme(axis.text.x = element_text(size=30), legend.position = "none", plot.title = element_text(size=35))+
labs(title= "B. Mothers' change of language use English")
figure_3<- figure_3_a + figure_3_b
ggsave(file="Figure_3.png", width=25, height=12, dpi=300)
#### Father sankey
dad_long<- FE_long_analyses %>% #this results in a dataframe that has one row per kid who had 2 FR-EN visits.
filter(type_of_family == "mother-father family") %>%
filter(!strategy=="single-parent") %>%
filter(visit %in% c(1,2)) %>%
select(anon_baby_id, l1, l2, care2_l1, care2_l2, visit, length_between_visits) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~care2_l1,
l2=="French"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2),
visit = paste0("Visit_", visit)) %>%
rename("Fre" = caregiver_2_french_use,
"Eng" = caregiver_2_english_use) %>%
select(-care2_l1, -care2_l2, -l1, -l2) %>%
pivot_wider(names_from = visit, values_from = c(Fre, Eng)) %>%
rename_at(vars(starts_with("Fre")), ~ paste0(str_remove(., "Fre_"), "_Fre")) %>%
rename_at(vars(starts_with("Eng")), ~  paste0(str_remove(., "Eng_"), "_Eng")) %>%
drop_na()
dad_long_french<- dad_long %>%
select(anon_baby_id, length_between_visits, Visit_1_Fre, Visit_2_Fre) %>%
mutate(Visit_1_Fre = case_when(Visit_1_Fre == "NA"~"never",
TRUE~ Visit_1_Fre))
dad_long_english<- dad_long %>%
select(anon_baby_id, length_between_visits, Visit_1_Eng, Visit_2_Eng)
dad_long_fre_s <- dad_long_french %>%
make_long("Visit_1_Fre","Visit_2_Fre")
dad_long_fre_s$node <- factor(dad_long_fre_s$node, levels= c("never","sometimes", "regularly"))
dad_long_fre_s$next_node <- factor(dad_long_fre_s$next_node, levels= c("never","sometimes","regularly"))
dad_long_eng_s <- dad_long_english %>%
make_long("Visit_1_Eng", "Visit_2_Eng")
dad_long_eng_s$node <- factor(dad_long_eng_s$node, levels= c("never","sometimes", "regularly"))
dad_long_eng_s$next_node <- factor(dad_long_eng_s$next_node, levels= c("never","sometimes","regularly"))
v1_dad_prop_fre <- dad_long %>%
select(Visit_1_Fre, Visit_1_Eng) %>%
group_by(Visit_1_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_dad_prop_fre <- dad_long %>%
select(Visit_2_Fre, Visit_2_Eng) %>%
group_by(Visit_2_Fre) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v1_dad_prop_eng <- dad_long %>%
select(Visit_1_Fre, Visit_1_Eng) %>%
group_by(Visit_1_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_dad_prop_eng <- dad_long %>%
select(Visit_2_Fre, Visit_2_Eng) %>%
group_by(Visit_2_Eng) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
figure_4_a <- ggplot(dad_long_fre_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values = c("#dac291","#41ae76", "#75638b"))+
geom_sankey_label(size=10, color="black", fill="white")+
theme_bw()+
theme(axis.text.x = element_text(size=30), legend.position = "none", plot.title = element_text(size=35))+
labs(title= "A. Fathers' change of language use French")
figure_4_b <- ggplot(dad_long_eng_s , aes(x = x,
next_x = next_x,
node = node,
next_node = next_node,
fill = factor(node), label=node)) +
geom_sankey(flow.color = "black") +
scale_fill_manual(values =c("#dac291","#41ae76", "#75638b"))+
geom_sankey_label(size=10, color="black", fill="white")+
theme_bw()+
theme(axis.text.x = element_text(size=30), legend.position = "none", plot.title = element_text(size=35))+
labs(title= "B. Fathers' change of language use English")
figure_4<- figure_4_a + figure_4_b
ggsave(file="Figure_4.png", width=25, height=12, dpi=300)
### Parents' Logistic model
for_mother_glmer <- mom_long  %>%
mutate(French_change = case_when(Visit_1_Fre == Visit_2_Fre ~ "No change",
TRUE~ "change")) %>%
mutate(English_change = case_when(Visit_1_Eng == Visit_2_Eng ~ "No change",
TRUE~ "change"))
for_father_glmer <- dad_long  %>%
mutate(French_change = case_when(Visit_1_Fre == Visit_2_Fre ~ "No change",
TRUE~ "change")) %>%
mutate(English_change = case_when(Visit_1_Eng == Visit_2_Eng ~ "No change",
TRUE~ "change"))
mother_long_prop<- for_mother_glmer %>%
group_by(French_change, English_change) %>%
tally()
father_long_prop<- for_father_glmer %>%
group_by(French_change, English_change) %>%
tally()
#Mother change model
mother_french_change_model<- glmer(as.factor(French_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_mother_glmer, family="binomial")
summary(mother_french_change_model)
mother_english_change_model<- glmer(as.factor(English_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_mother_glmer, family="binomial")
summary(mother_english_change_model)
#Father change model
father_french_change_model<- glmer(as.factor(French_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_father_glmer, family="binomial")
summary(father_french_change_model)
father_english_change_model<- glmer(as.factor(English_change) ~ scale(length_between_visits) +(1|anon_baby_id), data = for_father_glmer, family="binomial")
summary(father_english_change_model)
View(father_long_prop)
for_father_glmer %>%
filter(French_change == "change")%>%
filter(English_change == "change") %>%
group_by(visit, care2_l1) %>%
tally()
View(for_father_glmer)
for_father_glmer %>%
filter(French_change == "change")%>%
filter(English_change == "change") %>%
group_by(Visit_1_Fre, Visit_2_Fre) %>%
tally()
for_father_glmer %>%
filter(French_change == "change")%>%
filter(English_change == "change") %>%
ungroup()%>%
group_by(Visit_1_Eng, Visit_2_Eng) %>%
tally()
View(dad_long)
View(father_long_prop)
for_father_glmer %>%
ungroup()%>%
filter(English_change == "change") %>%
group_by(Visit_1_Eng, Visit_2_Eng) %>%
tally()
for_father_glmer %>%
ungroup()%>%
filter(French_change == "change")%>%
group_by(Visit_1_Fre, Visit_2_Fre) %>%
tally()
6+3+2
for_father_glmer %>%
ungroup()%>%
group_by (French_change)%>%
tally()
for_father_glmer %>%
ungroup()%>%
group_by (English_change)%>%
tally()
View(for_father_glmer)
400/13
for_mother_glmer %>%
filter(English_change == "change") %>%
group_by(Visit_1_Eng, Visit_2_Eng) %>%
tally()
for_mother_glmer %>%
filter(French_change == "change") %>%
ungroup()%>%
group_by(Visit_1_Fre, Visit_2_Fre) %>%
tally()
400/11
300/7
300/11
library(lubridate)
library(sparkline)
library(webshot)
library(htmlwidgets)
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(broom)
library(janitor)
library(glmmTMB)
library(DHARMa)
library(betareg)
library(emmeans)
library(ggiraphExtra)
library(ggeffects)
library(mvtnorm)
library(boot)
library(bbmle)
library(performance)
library(see)
library(writexl)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual exclusions
total_monoling_excluded<- final_data_no_exc %>%
filter(exp_l1 >95) %>%
filter(exp_l2 <5) %>%
distinct(unique_id) %>%
tally()
#after third language exclusions exclusions
n <- final_data_strat %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1)
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(anon_baby_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(anon_baby_id)%>% #using anon_baby_id since it uniquely identifies individual babies, instead of identifying by study
tally()
num_visits <- final_data_strat %>%
count(anon_baby_id, name = "n_visits") %>%
count(n_visits, name = "n_families")  %>%
mutate(n_data_points = n_families* n_visits)
#French-English-Heritage bilingual percentages
FEH <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Exporting the final data set that we used in all analyses and visualizations
#write_xlsx(FEH,"anonymized_data\\fam_Str_cross_sectional.xlsx")
FEH_perc<- FEH %>%
group_by(bilingual_type) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#By bilingual type percentages
fre_eng_perc <- FEH %>%
filter(bilingual_type== "fre-eng")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_her_perc <- FEH %>%
filter(bilingual_type=="fre-her")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_eng_perc <- FEH %>%
filter(bilingual_type=="eng-her") %>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#l1 amount of exposure range
min_exp_range <- final_data_strat %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data_strat %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length <- longitudinal_data_analyses %>%
filter(visit <= 2)
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
## LONGITUDINAL DATA ANALYSES ##
FE_long_analyses<- longitudinal_data_analyses %>%
filter(bilingual_type=="fre-eng")
v1_strat_prop <- FE_long_analyses %>%
select(visit, strategy) %>%
filter(visit==1) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally(name = "n_first_visit")%>%
mutate(proportion_first_visit = n_first_visit/sum(n_first_visit)) %>%
mutate(percentage_first_visit= proportion_first_visit*100)
v2_strat_prop <- FE_long_analyses %>%
select(visit, strategy) %>%
filter(visit==2) %>%
filter(!strategy == "single-parent") %>%
group_by(strategy) %>%
tally(name = "n_second_visit")%>%
mutate(proportion_second_visit = n_second_visit/sum(n_second_visit)) %>%
mutate(percentage_second_visit= proportion_second_visit*100)
FE_percentages_visits <- merge(v1_strat_prop, v2_strat_prop, by="strategy")
UNIQUE(FE_long_analyses$strategy)
unique(FE_long_analyses$strategy)
