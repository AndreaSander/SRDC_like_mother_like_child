geom_bar() +
facet_grid(cols = vars(strategy)) +
scale_fill_manual (name = "Frequency use of French as L2", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Mothers' French as L2 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.text= element_text(size=20), legend.title= element_text(size=20))+
labs(title= "B. Mothers' use of French as L2 by strategy")
#Plotting fathers distribution of French use as L1
F_l1$care2_l1<- factor(F_l1$care2_l1, levels= c("regularly", "sometimes", "never"))
figure_5_a<- ggplot(data = F_l1, aes(x=care2_l1, fill= care2_l1)) +
geom_bar() +
facet_grid(cols = vars(strategy))+
scale_fill_manual (name = "Frequency use of French as L1", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Fathers' French as L1 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "A. Fathers' use of French as L1 by strategy")
#Plotting fathers distribution of French use as L2
F_l2$care2_l2<- factor(F_l2$care2_l2, levels= c("regularly", "sometimes", "never"))
figure_5_b<- F_l2 %>%
filter(!care2_l2 == "NA")%>%
ggplot(aes(x=care2_l2, fill= care2_l2)) +
geom_bar() +
facet_grid(cols = vars(strategy))+
scale_fill_manual (name = "Frequency use of French as L2", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Fathers' French as L2 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.text= element_text(size=20), legend.title= element_text(size=20))+
labs(title= "B. Fathers' use of French as L2 by strategy")
########################## ENGLISH DATA ##################
E_l1 <- FEH %>%
select(c(unique_id, l1, exp_l1, l2, exp_l2, care1_l1, care1_l2, care2_l1, care2_l2, strategy)) %>%
filter(l1=="English") %>%
filter(!strategy %in% c("single-parent", "one-language-at-home"))
E_l2 <- FEH %>%
select(c(unique_id, l1, exp_l1, l2, exp_l2, care1_l1, care1_l2, care2_l1, care2_l2, strategy)) %>%
filter(l2=="English") %>%
filter(!strategy %in% c("single-parent", "one-language-at-home"))
#Plotting mothers distribution of English use as L1
E_l1$care1_l1<- factor(E_l1$care1_l1, levels= c("regularly", "sometimes", "never"))
figure_4_c<- ggplot(data = E_l1, aes(x=care1_l1, fill= care1_l1)) +
geom_bar() +
facet_grid(cols = vars(strategy))+
scale_fill_manual (name = "Frequency use of English as L1", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Mothers' English as L1 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "C. Mothers' use of English as L1 by strategy")
#Plotting mothers distribution of English use as L2
E_l2$care1_l2<- factor(E_l2$care1_l2, levels= c("regularly", "sometimes", "never"))
figure_4_d<- E_l2 %>%
filter(!care1_l2 == "NA")%>%
ggplot(aes(x=care1_l2, fill= care1_l2)) +
geom_bar() +
facet_grid(cols = vars(strategy)) +
scale_fill_manual (name = "Frequency use of English as L1", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Mothers' English as L2 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "D. Mothers' use of English as L2 by strategy")
#Plotting fathers distribution of English use as L1
E_l1$care2_l1<- factor(E_l1$care2_l1, levels= c("regularly", "sometimes", "never"))
figure_5_c<- ggplot(data = E_l1, aes(x=care2_l1, fill= care2_l1)) +
geom_bar() +
facet_grid(cols = vars(strategy))+
scale_fill_manual (name = "Frequency use of English as L1", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Fathers' English as L1 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "C. Fathers' use of English as L1 by strategy")
#Plotting fathers' distribution of French use as L2
E_l2$care2_l2<- factor(E_l2$care2_l2, levels= c("regularly", "sometimes", "never"))
figure_5_d<- E_l2 %>%
filter(!care2_l2 == "NA")%>%
ggplot(aes(x=care2_l2, fill= care2_l2)) +
geom_bar() +
facet_grid(cols = vars(strategy))+
scale_fill_manual (name = "Frequency use of English as L2", values = c("#2c7fb8","#7fcdbb", "#edf8b1")) +
theme_bw() +
xlab("Fathers' English as L2 use")+
theme(axis.text.x = element_blank(), axis.text.y = element_text(size=20),axis.title = element_text(size=20), plot.title = element_text(size=20), legend.position = "none")+
labs(title= "D. Fathers' use of English as L2 by strategy")
#Constructing mother and father figures of language use distribution
figure_5<- figure_5_a+figure_5_b+figure_5_c+figure_5_d
figure_4<- figure_4_a+figure_4_b+figure_4_c+figure_4_d
for_beta <- FE_for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2))%>%
mutate(caregiver_1_french_use = case_when(caregiver_1_french_use == "regularly" ~3,
caregiver_1_french_use == "sometimes"~ 2,
caregiver_1_french_use == "never"~1))%>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(caregiver_1_english_use == "regularly" ~3,
caregiver_1_english_use == "sometimes"~ 2,
caregiver_1_english_use == "never"~1)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_french_use = case_when(caregiver_2_french_use == "regularly" ~3,
caregiver_2_french_use == "sometimes"~ 2,
caregiver_2_french_use == "never"~1))%>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(caregiver_2_english_use == "regularly" ~3,
caregiver_2_english_use == "sometimes"~ 2,
caregiver_2_english_use == "never"~1))%>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use,caregiver_2_english_use) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy))
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use, caregiver_2_english_use) %>%
filter(fre_exp != "NA") %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy))
#Dataframe for balance
for_balance<- for_beta_blc%>%
select(age, exp_l2, strategy, anon_baby_id) %>%
filter(exp_l2 != "NA") %>%
mutate(exp_l2 = exp_l2/100,
strategy = as.factor(strategy))
for_beta_blc <- FE_for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy, care1_l1, care2_l1, care1_l2, care2_l2) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
#Dataframe for balance
for_balance<- for_beta_blc%>%
select(age, exp_l2, strategy, anon_baby_id) %>%
filter(exp_l2 != "NA") %>%
mutate(exp_l2 = exp_l2/100,
strategy = as.factor(strategy))
#MOTHER MODELS
mom_beta_eng<- glmmTMB(eng_exp ~ caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_1_english_use)
mom_beta_fre<- glmmTMB(fre_exp ~ caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_1_french_use)
#FATHER MODELS
dad_beta_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use)
dad_beta_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use)
#MOTHER AND FATHER MODELS
parents_aditive_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use + caregiver_1_english_use)
parents_aditive_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use + caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use + caregiver_1_french_use)
parents_int_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use * caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use * caregiver_1_english_use)
parents_int_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use * caregiver_1_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use * caregiver_1_french_use)
## MODEL COMPARISONS
#ENGLISH MODELS
test_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng)
#FATHER MODELS
dad_beta_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use)
dad_beta_fre<- glmmTMB(fre_exp ~ caregiver_2_french_use, data=for_beta_fre, family= beta_family(link="logit"), dispformula = ~ caregiver_2_french_use)
test_performance(parents_int_eng, parents_aditive_eng, dad_beta_eng)
test_performance(mom_beta_eng,parents_int_eng, parents_aditive_eng)
#MOTHER MODELS
mom_beta_eng<- glmmTMB(na.rm(eng_exp) ~ caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_1_english_use)
View(for_beta)
View(for_beta_blc)
View(for_beta_eng)
View(for_beta_fre)
#Summary of FATHER models
summary(dad_beta_eng)
test_performance(dad_beta_eng, parents_int_eng)
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use,caregiver_2_english_use) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy)) %>%
na.rm()
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use,caregiver_2_english_use) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use, caregiver_2_english_use) %>%
filter(fre_exp != "NA") %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
#FATHER MODELS
dad_beta_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use)
#MOTHER AND FATHER MODELS
parents_aditive_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use + caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use + caregiver_1_english_use)
parents_int_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use * caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use * caregiver_1_english_use)
test_performance(parents_int_eng, parents_aditive_eng, dad_beta_eng)
install.packages("see")
library(see)
knitr::opts_chunk$set(echo = TRUE)
options(scipen = 100, digits = 4)
see::plot(compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng))
plot(compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng))
plot(see::compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng))
?see
lsf.str("package:see")
plot(compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng))
plot(performance::compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng))
performance::compare_performance(parents_int_eng, parents_aditive_eng, mom_beta_eng, dad_beta_eng
)
#STRATEGY MODELS
strat_eng<- glmmTMB(eng_exp ~ strategy, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ strategy)
library(lubridate)
library(sparkline)
library(webshot)
library(htmlwidgets)
library(formattable)
library(here)
library(lme4)
library(lmerTest)
library(rstatix)
library(papeR)
library(knitr)
library(waffle)
library(ggsankey)
library(dplyr)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(broom)
library(janitor)
library(glmmTMB)
library(DHARMa)
library(betareg)
library(emmeans)
library(ggeffects)
library(mvtnorm)
library(boot)
library(bbmle)
library(performance)
library(see)
load(here("anonymized_data/final_merged_data.Rda"))
load(here("anonymized_data/final_data_no_exc.Rda"))
load(here("anonymized_data/final_data_strat.Rda"))
load(here("anonymized_data/longitudinal_data.Rda"))
#Saving my palette to use in visualizations
my_yellow<-"#FFC107"
my_orange<- "#D95F02"
my_blue<- "#1F78B4"
my_green<- "#33a02c"
my_purple<- "#683f6d"
#### CONSTRUCTING AND DESCRIBING ALL RELEVANT DATA SETS ####
#Trilingul exclusions count
total_excluded_triling<- final_data_no_exc %>%
group_by(unique_id, exp_l1, exp_l2)%>%
mutate(total_l1_l2_exp=(sum(exp_l1,exp_l2,na.rm = T))) %>%
ungroup() %>%
filter(total_l1_l2_exp<=90) %>%
distinct(unique_id)%>%
tally()
#Monolingual exclusions
total_monoling_excluded<- final_data %>%
filter(exp_l1 >95) %>%
filter(exp_l2 <5) %>%
distinct(unique_id) %>%
tally()
#after third language exclusions exclusions
n <- final_data %>%
distinct(unique_id) %>%
tally()
#subseting to get data only from each child's first visit to the lab. For main analyses
first_visit_only <- final_data_strat%>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(visit==1) #439 data from first visit only
#n when only taking first visit
n_keep_first_visit<-first_visit_only %>%
distinct(unique_id)%>%
tally()
age_min <- round(min(first_visit_only$age, na.rm = T), 2)
age_max<- round(max(first_visit_only$age, na.rm = T), 2)
age_mean<- round(mean(first_visit_only$age, na.rm = T), 2)
age_sd<- round(sd(first_visit_only$age, na.rm = T), 2)
female<- first_visit_only %>%
filter(gender=="female")%>%
distinct(unique_id)%>%
tally()
twice_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==2)%>%
distinct(unique_id)%>%
tally()
three_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn==3)%>%
distinct(unique_id)%>%
tally()
four_visit <- final_data %>%
add_count(anon_baby_id) %>%
filter(nn>3)%>%
distinct(unique_id)%>%
tally()
#French-English-Heritage bilingual percentages
FEH <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(l2 = case_when(l2=="French" ~ "French",
l2=="English" ~ "English",
TRUE ~ "Heritage")) %>%
mutate(bilingual_type = case_when(l1 %in% c("French", "English") & l2 %in% c("French", "English") ~ "fre-eng",
l1 %in% c("French", "Heritage") & l2 %in% c("French", "Heritage") ~ "fre-her",
l1 %in% c("Heritage", "English") & l2 %in% c("Heritage", "English") ~ "eng-her"))
FEH_perc<- FEH %>%
group_by(bilingual_type) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#By bilingual type percentages
fre_eng_perc <- FEH %>%
filter(bilingual_type== "fre-eng")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
fre_her_perc <- FEH %>%
filter(bilingual_type=="fre-her")%>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
her_eng_perc <- FEH %>%
filter(bilingual_type=="eng-her") %>%
group_by(l1) %>%
tally()%>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#l1 amount of exposure range
min_exp_range <- final_data %>%
select(exp_l1) %>%
min()
max_exp_range <-final_data %>%
select(exp_l1) %>%
max()
#Prepping longitudinal data excluding irrelevant cases
longitudinal_data_analyses <- longitudinal_data %>%
select(age, strategy, unique_id, anon_baby_id, leq_date)
longitudinal_data_analyses <- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15)
#Longitudinal data set n
n_long <-longitudinal_data_analyses %>%
distinct(unique_id)%>%
tally()
#Longitudinal data set length between visit one and 2
visit_length<- longitudinal_data %>%
arrange(anon_baby_id, age) %>%
group_by(anon_baby_id) %>%
mutate(visit = row_number()) %>%
ungroup() %>%
filter(nn==2) %>%
mutate(first_visit_date = case_when(visit == 1 ~ leq_date)) %>%
mutate(second_visit_date = case_when(visit == 2 ~ leq_date)) %>%
select(anon_baby_id, first_visit_date, second_visit_date) %>%
group_by(anon_baby_id) %>%
fill(first_visit_date, second_visit_date, .direction="updown") %>% #to collapse the rows and be able to calculate visit
distinct() %>%
ungroup() %>%
mutate(length_between_visits = abs(interval(start= first_visit_date, end=second_visit_date)/ duration (n=1, unit="days" ))) %>%
filter(! length_between_visits < 15) ##Filter visits that were very close together.
##!! There is a mistake in one date which results in a negative date. Fix.
avg_visit_l <- round(mean(visit_length$length_between_visits), 2)
min_visit_l <- round(min(visit_length$length_between_visits),2)
max_visit_l <- round(max(visit_length$length_between_visits),2)
sd_visit_l <- round(sd(visit_length$length_between_visits),2)
#Family language strategy visualization
####### FOR THE FRENCH- ENGLISH SAMPLE ############
#Calculating how many families use each strategy and its corresponding %
prop_strategy_FE<- FEH %>%
filter(bilingual_type == "fre-eng")%>%
group_by(strategy) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
#Reordering levels so legend in the graph is in order.
prop_strategy_FE$strategy<- factor(prop_strategy_FE$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
prop_strategy_FE<- prop_strategy_FE %>%
arrange(desc(prop))
#Creating dataframes of each strategy to save their percentages and print them on the text
##Both parents bilingual
both_parents_biling<- prop_strategy_FE %>%
filter(strategy=="both-parents-bilingual") %>%
select(perc)
perc_both_parents_biling<- round(both_parents_biling$perc, 1)
##One parent bilingual
one_parent_biling<- prop_strategy_FE %>%
filter(strategy=="one-parent-bilingual") %>%
select(perc)
perc_one_parents_biling<- round(one_parent_biling$perc, 1)
##One parent one lang
one_parent_one_lang<- prop_strategy_FE %>%
filter(strategy=="one-parent-one-lang") %>%
select(perc)
perc_one_parent_one_lang<- round(one_parent_biling$perc, 1)
##one language at home
one_language_at_home<- prop_strategy_FE %>%
filter(strategy=="one-language-at-home") %>%
select(perc)
perc_one_language_at_home<- round(one_parent_biling$perc, 1)
#Waffle plot
V1_FE<- setNames(prop_strategy_FE$n, c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lanaguage", "one-language-at-home", "single-parent"))
figure_1_FE<- waffle(parts = V1_FE, rows=13, colors = c(my_orange, my_yellow, my_blue, my_green, my_purple), keep = T, title = "% Family Strategies for the French-English sample", size=0.6)
#Making a figure of most used strategies divided by lang exposure
for_breakdown <- first_visit_only %>%
mutate(l1 = case_when(l1=="French" ~ "French",
l1=="English" ~ "English",
TRUE ~ "Heritage")) %>%
group_by(strategy, l1) %>%
tally() %>%
mutate(prop = n/sum(n)) %>%
mutate(perc= prop*100)
for_breakdown$strategy<- factor(for_breakdown$strategy, levels= c("both-parents-bilingual", "one-parent-bilingual", "one-parent-one-lang", "one-language-at-home", "single-parent"))
ggplot(for_breakdown, aes(x=l1, y=n, fill=strategy)) +
geom_bar(stat="identity", position="fill") +
scale_fill_manual (name = "Family Strategy", values =c(my_orange, my_yellow, my_blue, my_green, my_purple))
FE_for_anovas<- FEH %>%
filter(bilingual_type == "fre-eng") %>%
filter(!strategy == "single-parent") %>%
filter(!strategy == "one-language-at-home") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
##French Anova objects
FE_anova_model_french <- aov(fre_exp ~ strategy, data= FE_for_anovas)
FE_aov_fre<- tidy(FE_anova_model_french)
FE_tukey_fre_s<- TukeyHSD (FE_anova_model_french)
FE_fre_F <- FE_aov_fre$statistic
FE_fre_p <- FE_aov_fre$p.value
##English ANOVA objects
FE_anova_model_english <- aov(eng_exp ~ strategy, data= FE_for_anovas)
FE_aov_eng<- tidy(FE_anova_model_english)
FE_tukey_eng_s<- TukeyHSD(FE_anova_model_english)
FE_eng_F <- FE_aov_eng$statistic
FE_eng_p <- FE_aov_eng$p.value
#model_performance(anova_model_english)
#check_model(anova_model_english)
## Exposure balance
FE_for_blc_anova <- FEH %>%
filter(bilingual_type == "fre-eng")%>%
filter(!strategy == "single-parent") %>%
filter(!strategy == "one-language-at-home") %>%
mutate(strategy = case_when(strategy=="both-parents-bilingual"~"BothParentsBilingual",
strategy=="one-parent-bilingual"~"OneParentBilingual",
strategy=="one-parent-one-lang"~"OneParentOneLang"))
FE_blc_model <- aov(exp_l2 ~ strategy, data= FE_for_blc_anova)
FE_aov_blc<- tidy(FE_blc_model)
FE_tukey_blc_s<- TukeyHSD(FE_blc_model)
model_performance(anova_model_french)
for_beta <- FE_for_anovas %>%
select(gender, anon_baby_id, age, fre_exp, eng_exp, strategy, care1_l1, care1_l2, care2_l1, care2_l2, l1, l2) %>%
mutate(caregiver_1_french_use = case_when(l1=="French"~care1_l1,
l2=="French"~care1_l2))%>%
mutate(caregiver_1_french_use = case_when(caregiver_1_french_use == "regularly" ~3,
caregiver_1_french_use == "sometimes"~ 2,
caregiver_1_french_use == "never"~1))%>%
mutate(caregiver_1_english_use = case_when(l1=="English"~care1_l1,
l2=="English"~care1_l2)) %>%
mutate(caregiver_1_english_use = case_when(caregiver_1_english_use == "regularly" ~3,
caregiver_1_english_use == "sometimes"~ 2,
caregiver_1_english_use == "never"~1)) %>%
mutate(caregiver_2_french_use = case_when(l1=="French"~ care2_l1,
l2=="French"~ care2_l2)) %>%
mutate(caregiver_2_french_use = case_when(caregiver_2_french_use == "regularly" ~3,
caregiver_2_french_use == "sometimes"~ 2,
caregiver_2_french_use == "never"~1))%>%
mutate(caregiver_2_english_use = case_when(l1=="English"~care2_l1,
l2=="English"~care2_l2)) %>%
mutate(caregiver_2_english_use = case_when(caregiver_2_english_use == "regularly" ~3,
caregiver_2_english_use == "sometimes"~ 2,
caregiver_2_english_use == "never"~1))%>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
for_beta_blc <- FE_for_blc_anova %>%
select(gender, anon_baby_id, age, exp_l2, strategy, care1_l1, care2_l1, care1_l2, care2_l2) %>%
filter(gender != "NA") %>%
filter(!strategy == "OneLanguageAtHome")
# Dataframe for english exposure
for_beta_eng <- for_beta %>%
select(age, eng_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use,caregiver_2_english_use) %>%
filter(eng_exp != "NA") %>%
mutate(eng_exp = eng_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
# Dataframe for french exposure
for_beta_fre <- for_beta %>%
select(age, fre_exp, strategy, anon_baby_id, caregiver_1_french_use, caregiver_1_english_use, caregiver_2_french_use, caregiver_2_english_use) %>%
filter(fre_exp != "NA") %>%
mutate(fre_exp = fre_exp/100,
strategy = as.factor(strategy)) %>%
drop_na()
#STRATEGY MODELS
strat_eng<- glmmTMB(eng_exp ~ strategy, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ strategy)
parents_int_eng<- glmmTMB(eng_exp ~ caregiver_2_english_use * caregiver_1_english_use, data=for_beta_eng, family= beta_family(link="logit"), dispformula = ~ caregiver_2_english_use * caregiver_1_english_use)
plot(performance::compare_performance(parents_int_eng, strat_eng))
performance::compare_performance(parents_int_eng, strat_eng)
plot(performance::compare_performance(parents_int_eng, strat_eng))
